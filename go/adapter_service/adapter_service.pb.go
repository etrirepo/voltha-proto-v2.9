// Code generated by protoc-gen-go. DO NOT EDIT.
// source: voltha_protos/adapter_service.proto

package adapter_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	bossopenolt "github.com/opencord/voltha-protos/v5/go/bossopenolt"
	common "github.com/opencord/voltha-protos/v5/go/common"
	core_adapter "github.com/opencord/voltha-protos/v5/go/core_adapter"
	extension "github.com/opencord/voltha-protos/v5/go/extension"
	health "github.com/opencord/voltha-protos/v5/go/health"
	omci "github.com/opencord/voltha-protos/v5/go/omci"
	voltha "github.com/opencord/voltha-protos/v5/go/voltha"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("voltha_protos/adapter_service.proto", fileDescriptor_038e6ec340f67698)
}

var fileDescriptor_038e6ec340f67698 = []byte{
	// 1667 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x99, 0xdf, 0x73, 0xdb, 0xb8,
	0x11, 0xc7, 0xa7, 0xed, 0x8c, 0xdb, 0xc0, 0xbf, 0xd9, 0x5c, 0x72, 0x95, 0x2f, 0xbf, 0x9f, 0x8f,
	0x9e, 0xf1, 0x4d, 0xee, 0xda, 0x49, 0xd3, 0x8b, 0x24, 0xca, 0xb4, 0xef, 0xe2, 0x4a, 0x27, 0xda,
	0x9e, 0x4e, 0x5e, 0x3c, 0x10, 0xb9, 0x92, 0x30, 0x01, 0x01, 0x15, 0x00, 0x6d, 0xa7, 0x4f, 0x7d,
	0xec, 0x9f, 0xdd, 0x01, 0x41, 0xd2, 0x04, 0x2d, 0x4b, 0x14, 0x95, 0x37, 0x89, 0x8b, 0xef, 0x87,
	0x0b, 0xec, 0x72, 0xb1, 0x20, 0xd1, 0x9b, 0x6b, 0x4e, 0xd5, 0x14, 0x5f, 0xcd, 0x04, 0x57, 0x5c,
	0x1e, 0xe2, 0x08, 0xcf, 0x14, 0x88, 0x2b, 0x09, 0xe2, 0x9a, 0x84, 0xe0, 0xa6, 0x97, 0x9d, 0xdd,
	0xca, 0xe5, 0xd6, 0xc1, 0x84, 0xf3, 0x09, 0x85, 0xc3, 0xd4, 0x3c, 0x4a, 0xc6, 0x87, 0x10, 0xcf,
	0xd4, 0x17, 0x33, 0xba, 0xd5, 0xb2, 0x91, 0x21, 0x8f, 0x63, 0xce, 0x32, 0xdb, 0xcb, 0xaa, 0x4d,
	0xc0, 0x55, 0x06, 0x9f, 0xaf, 0x8e, 0xe0, 0xce, 0x8f, 0xd6, 0x73, 0xdb, 0x06, 0xb7, 0x0a, 0x98,
	0x24, 0x9c, 0xc9, 0xf9, 0xda, 0x29, 0x60, 0xaa, 0xa6, 0xf3, 0x6d, 0xe6, 0x5f, 0x66, 0x7b, 0x66,
	0xdb, 0x78, 0x1c, 0x92, 0x2b, 0x05, 0x52, 0xcd, 0x97, 0xc2, 0x35, 0x30, 0x95, 0xdf, 0xf2, 0x85,
	0x6d, 0x1b, 0x71, 0x29, 0xf9, 0x0c, 0x18, 0xa7, 0x99, 0xf8, 0xe8, 0xbf, 0xef, 0xd0, 0x4e, 0xdb,
	0xcc, 0x30, 0x30, 0xab, 0xe7, 0xbc, 0x43, 0xbb, 0x3e, 0xa8, 0x93, 0xd4, 0xbb, 0x40, 0x61, 0x95,
	0x48, 0xc7, 0x71, 0xb3, 0x65, 0xea, 0x72, 0xc6, 0x20, 0x54, 0x84, 0xb3, 0xd6, 0x63, 0x37, 0x9b,
	0x80, 0x35, 0xf2, 0x2d, 0xda, 0x6c, 0x47, 0x7c, 0xa6, 0xbc, 0x74, 0x61, 0x9c, 0x1d, 0x37, 0x5b,
	0x21, 0xf3, 0xbf, 0xf5, 0xc4, 0x35, 0xa1, 0x71, 0xf3, 0xd0, 0xb8, 0x3d, 0x1d, 0x1a, 0xe7, 0x6f,
	0x68, 0x77, 0x08, 0x21, 0x67, 0x21, 0xa1, 0xb0, 0xa2, 0xf4, 0x47, 0xb4, 0xe5, 0x01, 0x05, 0xb5,
	0xaa, 0xee, 0x27, 0xb4, 0xed, 0x11, 0x89, 0x47, 0x2b, 0xdf, 0xf0, 0xaf, 0x68, 0x67, 0x08, 0x3d,
	0xd6, 0x40, 0xf9, 0x23, 0xda, 0x1a, 0xc2, 0x88, 0x73, 0xb5, 0xfa, 0x1d, 0x03, 0xa0, 0xe3, 0x73,
	0x90, 0xab, 0x2a, 0x3b, 0x68, 0xcf, 0x07, 0xd5, 0x1f, 0xcf, 0xcc, 0xb8, 0x53, 0x36, 0xe6, 0xf7,
	0xb4, 0xcf, 0x5d, 0x2b, 0xcf, 0x83, 0x1b, 0xa2, 0xc2, 0x69, 0x17, 0xcf, 0xf0, 0x88, 0x50, 0x62,
	0x62, 0xd3, 0x9d, 0x12, 0x1a, 0x99, 0xe1, 0x1f, 0xb9, 0x54, 0xb5, 0x6f, 0x7f, 0x84, 0x90, 0x59,
	0xa8, 0x01, 0x17, 0xca, 0xd9, 0xca, 0x55, 0xfa, 0xdf, 0x83, 0x9a, 0x1f, 0xd0, 0x66, 0x16, 0x97,
	0x15, 0x44, 0x1d, 0xb4, 0x7b, 0x31, 0x8b, 0xb0, 0x82, 0x63, 0xca, 0x6f, 0x64, 0x27, 0xa1, 0x9f,
	0x9d, 0xa7, 0xf6, 0xb4, 0xf4, 0xb5, 0xd4, 0xf8, 0x20, 0x63, 0x88, 0xbe, 0x2d, 0x31, 0x4e, 0x59,
	0x28, 0x20, 0x06, 0xa6, 0x30, 0xa5, 0x5f, 0x9c, 0xca, 0x1a, 0x95, 0x8c, 0x8b, 0x99, 0x1f, 0xd0,
	0x76, 0x00, 0x2c, 0x1a, 0xe0, 0xf0, 0x33, 0xa8, 0x7e, 0xa2, 0xaa, 0x5e, 0x15, 0x86, 0x07, 0x09,
	0x3d, 0xb4, 0x63, 0xbc, 0x1a, 0xc4, 0x5d, 0xce, 0xc6, 0x64, 0xe2, 0x1c, 0x54, 0x10, 0xd9, 0x75,
	0xa9, 0x83, 0xfb, 0x20, 0x26, 0x40, 0x7b, 0x1e, 0xbf, 0x61, 0x94, 0xe3, 0xa8, 0xcf, 0x92, 0xd3,
	0x18, 0x4f, 0xc0, 0x79, 0x6d, 0x47, 0x31, 0xbd, 0x98, 0x0f, 0x1a, 0xc2, 0xbf, 0x13, 0x90, 0xaa,
	0x75, 0x30, 0x67, 0xcc, 0x10, 0xe4, 0x8c, 0x33, 0x09, 0xce, 0x47, 0xb4, 0xaf, 0xb3, 0x2b, 0xe3,
	0x65, 0x15, 0xa0, 0x35, 0x57, 0x51, 0x83, 0xd6, 0x47, 0x8f, 0xdb, 0x23, 0x2e, 0x0a, 0xde, 0xc5,
	0x6c, 0x22, 0x70, 0x04, 0xcd, 0x81, 0xdf, 0xa3, 0xad, 0x92, 0x7b, 0xd2, 0x41, 0x79, 0x15, 0x3b,
	0xf5, 0x5a, 0xfb, 0xb9, 0xf0, 0xce, 0xfc, 0x2b, 0xda, 0x6b, 0x87, 0x8a, 0x5c, 0x63, 0x05, 0xc5,
	0x12, 0x35, 0xbe, 0xf7, 0x29, 0xda, 0xe9, 0xf2, 0x38, 0x26, 0x6a, 0x7d, 0x54, 0x1f, 0x6d, 0xe7,
	0x51, 0xc9, 0xe3, 0x66, 0x27, 0x63, 0x39, 0x6e, 0x67, 0x20, 0x25, 0x9e, 0x40, 0xeb, 0x9b, 0x9c,
	0x68, 0x59, 0x5f, 0xff, 0xe1, 0x7f, 0xbf, 0xff, 0x9d, 0xf3, 0x2f, 0xf4, 0xc4, 0x07, 0x65, 0x19,
	0xb2, 0xd8, 0xad, 0x4b, 0xbe, 0x40, 0x7f, 0xee, 0x62, 0x16, 0x02, 0xb5, 0x6c, 0x5f, 0x03, 0x9b,
	0x47, 0x26, 0xcb, 0x0c, 0xfd, 0x40, 0xac, 0x8d, 0x0d, 0xd0, 0xfe, 0x10, 0xae, 0x41, 0xa8, 0xaf,
	0x09, 0x7d, 0x87, 0xb6, 0x03, 0x85, 0x85, 0xea, 0xc7, 0x21, 0xd1, 0x05, 0xdb, 0x79, 0x62, 0x03,
	0xfb, 0x67, 0xdd, 0x53, 0x7d, 0xbd, 0xe5, 0xb8, 0x7a, 0x23, 0x77, 0xf5, 0xef, 0x22, 0xd4, 0xbf,
	0xa0, 0xed, 0x80, 0xc4, 0x09, 0xc5, 0x0a, 0xda, 0x14, 0x8b, 0xb8, 0xea, 0x8d, 0x65, 0xbc, 0xf3,
	0x26, 0x4b, 0xeb, 0xfe, 0x0c, 0x04, 0xd6, 0x7b, 0xb3, 0xe6, 0xa5, 0x8e, 0x24, 0xb3, 0x99, 0x00,
	0x29, 0x7b, 0xba, 0x25, 0x70, 0x1c, 0x37, 0x6d, 0x0d, 0xdc, 0xf4, 0xdf, 0x31, 0xa1, 0x0a, 0xc4,
	0x83, 0xe5, 0xe2, 0x3d, 0xda, 0xbd, 0x60, 0xcd, 0xe5, 0x27, 0x68, 0xd3, 0x07, 0xd5, 0xbb, 0x55,
	0x97, 0x98, 0x26, 0xe0, 0xbc, 0xb4, 0x67, 0x51, 0x32, 0xe5, 0x73, 0x78, 0xea, 0x16, 0xdd, 0x92,
	0x3b, 0x04, 0x95, 0x08, 0x96, 0x9a, 0xa5, 0xe3, 0xa3, 0xcd, 0xe0, 0x61, 0x52, 0x70, 0x9f, 0xf4,
	0x90, 0x4b, 0x17, 0x68, 0xc7, 0x07, 0x15, 0x10, 0x36, 0xa1, 0x90, 0xb3, 0xee, 0xee, 0x69, 0xae,
	0xfb, 0x60, 0x58, 0xf9, 0x63, 0xf9, 0x6a, 0xc1, 0x88, 0x2c, 0x62, 0x17, 0x7a, 0x6b, 0x5e, 0x82,
	0x0d, 0x96, 0x62, 0x83, 0x2a, 0xf6, 0x04, 0x6d, 0x4f, 0x40, 0x75, 0x13, 0xa9, 0x78, 0x7c, 0x49,
	0x31, 0x73, 0xfe, 0xe2, 0x96, 0x7b, 0x37, 0xfd, 0xfb, 0x4a, 0x64, 0xb8, 0xef, 0x2c, 0x93, 0xf6,
	0x90, 0x62, 0x56, 0x26, 0xe9, 0x22, 0x48, 0x55, 0xd6, 0xba, 0xd5, 0x27, 0x65, 0x9a, 0x52, 0x72,
	0xee, 0x19, 0x52, 0xa9, 0x97, 0x58, 0x00, 0x3b, 0xa8, 0xc2, 0x3c, 0xb8, 0x2e, 0x58, 0xed, 0x34,
	0xac, 0x83, 0x38, 0x3a, 0xbf, 0xf5, 0x88, 0x5c, 0x84, 0x79, 0x6a, 0x99, 0x7a, 0xb7, 0x10, 0x0e,
	0x41, 0x26, 0x54, 0xe9, 0xcc, 0xf0, 0x33, 0x44, 0xb4, 0x18, 0xf1, 0xcc, 0x32, 0xe5, 0x8a, 0x52,
	0x7d, 0x75, 0x7c, 0xc8, 0x26, 0x35, 0x88, 0xf3, 0x52, 0xb8, 0x80, 0xf7, 0xbc, 0xca, 0x33, 0x92,
	0x02, 0xd8, 0xd5, 0x9b, 0x7e, 0x0e, 0xd4, 0x3d, 0x4c, 0x93, 0xe9, 0x99, 0xb8, 0xd5, 0x83, 0xdc,
	0xcb, 0x00, 0x2d, 0x28, 0xdc, 0xf9, 0x19, 0x3d, 0xca, 0xfe, 0x43, 0x33, 0x57, 0x3e, 0x20, 0x14,
	0x80, 0x3a, 0x53, 0x49, 0x40, 0xfe, 0x03, 0x8d, 0x08, 0x3d, 0x84, 0xfc, 0x5a, 0x04, 0x7b, 0x26,
	0x99, 0xa0, 0x98, 0xc9, 0x7b, 0xf4, 0xc7, 0xc0, 0xa4, 0xf7, 0x1a, 0xf3, 0xf8, 0x98, 0xa8, 0x33,
	0x1e, 0x35, 0x9b, 0x47, 0x27, 0x9d, 0x47, 0x0d, 0x82, 0x6d, 0xd2, 0xa3, 0x8b, 0x49, 0x74, 0xd0,
	0x56, 0x00, 0xaa, 0x3d, 0x21, 0x6c, 0xd2, 0xd8, 0x0f, 0x2f, 0xed, 0x6c, 0x6a, 0x31, 0xea, 0x79,
	0x72, 0x4e, 0xe2, 0x66, 0x9e, 0x9c, 0xde, 0x79, 0xb2, 0x8c, 0x61, 0x3f, 0x36, 0x85, 0xa4, 0x70,
	0xe7, 0x9f, 0x69, 0x7d, 0x31, 0x19, 0x7f, 0x86, 0xc3, 0x65, 0xf5, 0xe5, 0x85, 0x65, 0xf2, 0xe0,
	0x3a, 0xd3, 0x94, 0xea, 0x95, 0xae, 0x31, 0x41, 0xc4, 0xce, 0xf5, 0x61, 0x62, 0x11, 0xea, 0xa5,
	0x65, 0xca, 0x15, 0xbf, 0xc2, 0x97, 0x82, 0x65, 0x8a, 0x4d, 0x1d, 0xd6, 0xb3, 0xb9, 0xac, 0xf2,
	0xc3, 0xa8, 0x73, 0x10, 0xd8, 0x44, 0x4d, 0x1b, 0x2d, 0x78, 0x17, 0x3d, 0xf2, 0xeb, 0x00, 0xec,
	0xf2, 0x6b, 0xc6, 0x57, 0x22, 0xff, 0x5b, 0x42, 0x40, 0x7d, 0xe2, 0x6c, 0x9d, 0xc8, 0xd7, 0x62,
	0xd8, 0x91, 0x2f, 0x24, 0x85, 0x3b, 0xe6, 0xc1, 0x3c, 0x86, 0x70, 0xcd, 0x07, 0xb3, 0x06, 0x61,
	0xc1, 0xe3, 0xf0, 0x01, 0x6d, 0xb4, 0x23, 0x7d, 0x3a, 0xaa, 0xbf, 0xac, 0x66, 0x7c, 0x79, 0x59,
	0xcd, 0xab, 0x88, 0x3e, 0x4b, 0x8e, 0xde, 0xfa, 0x8d, 0x66, 0xf2, 0x33, 0x7a, 0x64, 0xa8, 0x01,
	0xc5, 0x8d, 0x00, 0x6d, 0xb4, 0xd9, 0xa5, 0x80, 0xc5, 0x1a, 0x88, 0x5f, 0x4c, 0xb6, 0x53, 0xbc,
	0xe2, 0x93, 0x33, 0x84, 0x19, 0x60, 0x05, 0x51, 0x40, 0x71, 0x65, 0x33, 0xec, 0xb3, 0xa4, 0x4d,
	0x29, 0x0f, 0x49, 0xd4, 0x30, 0xe9, 0xb7, 0x3d, 0xa0, 0x6b, 0x42, 0x4c, 0x96, 0xf5, 0x59, 0x72,
	0x29, 0x25, 0x5b, 0x63, 0x1b, 0xab, 0x41, 0xa8, 0x34, 0x52, 0x46, 0x50, 0x3e, 0x1b, 0x1a, 0x8c,
	0x47, 0xa4, 0xd2, 0xc7, 0xa5, 0x95, 0x50, 0x5a, 0x54, 0xaa, 0x4b, 0xfb, 0x01, 0xa8, 0x4e, 0x22,
	0xa4, 0xf2, 0x80, 0x92, 0x98, 0x28, 0x10, 0x8d, 0xa6, 0xf6, 0x5b, 0x7a, 0x94, 0xaf, 0x0f, 0x7a,
	0x65, 0x99, 0xca, 0xba, 0xc2, 0xb7, 0x63, 0xb4, 0x97, 0xfb, 0x36, 0x10, 0x80, 0xe3, 0x25, 0xa9,
	0xb4, 0xc0, 0xb5, 0x3d, 0x7f, 0x05, 0xce, 0xeb, 0xfb, 0x9e, 0xe5, 0xb2, 0xc2, 0xb5, 0x1e, 0xda,
	0xcd, 0x5d, 0xbb, 0x04, 0xa1, 0x1b, 0xf1, 0x46, 0x9e, 0xf5, 0xd3, 0x37, 0xa5, 0x75, 0x31, 0x73,
	0x96, 0x2c, 0x53, 0xcd, 0xf3, 0x6b, 0x20, 0xf8, 0x98, 0x34, 0x5c, 0xb1, 0x92, 0x5f, 0x35, 0x30,
	0xaf, 0xe6, 0x2d, 0x58, 0xaa, 0x2a, 0xfc, 0x0a, 0xd2, 0xec, 0x18, 0xc2, 0x84, 0x48, 0x05, 0x62,
	0x79, 0x87, 0xfc, 0xa6, 0x52, 0x16, 0xca, 0xba, 0xd2, 0x64, 0xb3, 0xa7, 0x69, 0xd9, 0x4e, 0x7f,
	0xef, 0x11, 0xb0, 0xb6, 0x79, 0xdf, 0x1c, 0x70, 0xe2, 0x90, 0x2c, 0xf7, 0xcb, 0xae, 0xde, 0x15,
	0x7f, 0xcc, 0xa6, 0xe8, 0x49, 0x8d, 0x5a, 0xb2, 0x0b, 0x2c, 0x2a, 0x54, 0x05, 0xc3, 0xc3, 0x0a,
	0x37, 0xdc, 0x59, 0xf5, 0x8c, 0x2e, 0x6a, 0x41, 0xec, 0x76, 0x23, 0x57, 0x14, 0x73, 0xfa, 0x3b,
	0xda, 0x08, 0x40, 0x9d, 0xf3, 0x66, 0x15, 0xf3, 0x3d, 0xda, 0xf0, 0x97, 0xaa, 0xbf, 0xb5, 0x4c,
	0xe7, 0x3c, 0xaa, 0x1c, 0xf2, 0xb4, 0x3f, 0x8d, 0xf7, 0xf5, 0x6e, 0xba, 0x13, 0xd5, 0x41, 0x2c,
	0xd8, 0xd8, 0x4d, 0x50, 0x8e, 0x21, 0xf4, 0xd6, 0xe8, 0x30, 0x7a, 0x69, 0x50, 0xea, 0x41, 0x96,
	0xf6, 0xdc, 0xeb, 0xd5, 0xea, 0xe3, 0xb4, 0xf3, 0xaa, 0xc5, 0xb0, 0x13, 0xde, 0x78, 0x5f, 0xf8,
	0xe2, 0xa5, 0xef, 0x2e, 0x7a, 0x42, 0x70, 0x31, 0x00, 0x11, 0x93, 0x66, 0xa7, 0xc3, 0xb3, 0x74,
	0x37, 0xab, 0x49, 0xb1, 0xfb, 0x85, 0x92, 0xa8, 0xb2, 0x40, 0xe9, 0x4b, 0x6d, 0x25, 0x38, 0x5d,
	0xa3, 0x35, 0xad, 0xc5, 0xa8, 0x9e, 0xe5, 0x33, 0x49, 0xa5, 0x48, 0x0d, 0xe2, 0xa5, 0x9d, 0xd0,
	0x77, 0x15, 0x90, 0xdd, 0xf6, 0x9b, 0x93, 0x6b, 0xd0, 0xee, 0x37, 0xdb, 0x68, 0xfe, 0x81, 0xfe,
	0x64, 0xe4, 0xe3, 0x71, 0xc3, 0xa6, 0xf2, 0x9b, 0xae, 0xd0, 0xad, 0xd9, 0x95, 0x79, 0x71, 0x79,
	0x35, 0xc5, 0x2c, 0xa2, 0x20, 0x6a, 0x7f, 0xc8, 0x31, 0xbd, 0x53, 0x40, 0x49, 0x08, 0x9d, 0x9b,
	0x86, 0xef, 0x33, 0x90, 0x5f, 0x8b, 0xf0, 0xa2, 0xfa, 0x32, 0x23, 0xd3, 0x94, 0xca, 0x4a, 0xba,
	0x18, 0x14, 0x5f, 0x1e, 0x2d, 0xe2, 0xb4, 0xec, 0x5a, 0xaf, 0x87, 0x97, 0x11, 0xfe, 0x9a, 0x88,
	0x13, 0x9d, 0xa7, 0x2c, 0x5a, 0xbd, 0x46, 0x77, 0xb8, 0x4c, 0x2b, 0x7b, 0x4e, 0xea, 0x28, 0xf4,
	0x86, 0x8b, 0x89, 0xab, 0xed, 0x21, 0x17, 0x91, 0x9b, 0x7d, 0xfb, 0xad, 0x7c, 0xd4, 0xee, 0x3c,
	0xbe, 0x4c, 0xaf, 0xdb, 0x1f, 0x6b, 0x3f, 0xfd, 0x34, 0x21, 0x6a, 0x9a, 0x8c, 0xdc, 0x90, 0xc7,
	0x87, 0x39, 0x21, 0xfb, 0x7a, 0xfc, 0x7d, 0xfe, 0x2d, 0xf9, 0xed, 0xe1, 0x84, 0x57, 0x3f, 0x9d,
	0x8f, 0x36, 0x52, 0xeb, 0x0f, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x55, 0x63, 0xd8, 0x63, 0x62,
	0x1f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AdapterServiceClient is the client API for AdapterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdapterServiceClient interface {
	// GetHealthStatus is used by an AdapterService client to verify connectivity
	// to the gRPC server hosting the AdapterService service
	GetHealthStatus(ctx context.Context, in *common.Connection, opts ...grpc.CallOption) (*health.HealthStatus, error)
	// Device
	AdoptDevice(ctx context.Context, in *voltha.Device, opts ...grpc.CallOption) (*empty.Empty, error)
	ReconcileDevice(ctx context.Context, in *voltha.Device, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteDevice(ctx context.Context, in *voltha.Device, opts ...grpc.CallOption) (*empty.Empty, error)
	DisableDevice(ctx context.Context, in *voltha.Device, opts ...grpc.CallOption) (*empty.Empty, error)
	ReEnableDevice(ctx context.Context, in *voltha.Device, opts ...grpc.CallOption) (*empty.Empty, error)
	RebootDevice(ctx context.Context, in *voltha.Device, opts ...grpc.CallOption) (*empty.Empty, error)
	SelfTestDevice(ctx context.Context, in *voltha.Device, opts ...grpc.CallOption) (*empty.Empty, error)
	GetOfpDeviceInfo(ctx context.Context, in *voltha.Device, opts ...grpc.CallOption) (*core_adapter.SwitchCapability, error)
	ChildDeviceLost(ctx context.Context, in *voltha.Device, opts ...grpc.CallOption) (*empty.Empty, error)
	// Ports
	EnablePort(ctx context.Context, in *voltha.Port, opts ...grpc.CallOption) (*empty.Empty, error)
	DisablePort(ctx context.Context, in *voltha.Port, opts ...grpc.CallOption) (*empty.Empty, error)
	// Flows
	UpdateFlowsBulk(ctx context.Context, in *core_adapter.BulkFlows, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateFlowsIncrementally(ctx context.Context, in *core_adapter.IncrementalFlows, opts ...grpc.CallOption) (*empty.Empty, error)
	//Packets
	SendPacketOut(ctx context.Context, in *core_adapter.PacketOut, opts ...grpc.CallOption) (*empty.Empty, error)
	// PM
	UpdatePmConfig(ctx context.Context, in *core_adapter.PmConfigsInfo, opts ...grpc.CallOption) (*empty.Empty, error)
	// Image
	DownloadOnuImage(ctx context.Context, in *voltha.DeviceImageDownloadRequest, opts ...grpc.CallOption) (*voltha.DeviceImageResponse, error)
	GetOnuImageStatus(ctx context.Context, in *voltha.DeviceImageRequest, opts ...grpc.CallOption) (*voltha.DeviceImageResponse, error)
	AbortOnuImageUpgrade(ctx context.Context, in *voltha.DeviceImageRequest, opts ...grpc.CallOption) (*voltha.DeviceImageResponse, error)
	GetOnuImages(ctx context.Context, in *common.ID, opts ...grpc.CallOption) (*voltha.OnuImages, error)
	ActivateOnuImage(ctx context.Context, in *voltha.DeviceImageRequest, opts ...grpc.CallOption) (*voltha.DeviceImageResponse, error)
	CommitOnuImage(ctx context.Context, in *voltha.DeviceImageRequest, opts ...grpc.CallOption) (*voltha.DeviceImageResponse, error)
	// Deprecated Image APIs
	DownloadImage(ctx context.Context, in *core_adapter.ImageDownloadMessage, opts ...grpc.CallOption) (*voltha.ImageDownload, error)
	GetImageDownloadStatus(ctx context.Context, in *core_adapter.ImageDownloadMessage, opts ...grpc.CallOption) (*voltha.ImageDownload, error)
	CancelImageDownload(ctx context.Context, in *core_adapter.ImageDownloadMessage, opts ...grpc.CallOption) (*voltha.ImageDownload, error)
	ActivateImageUpdate(ctx context.Context, in *core_adapter.ImageDownloadMessage, opts ...grpc.CallOption) (*voltha.ImageDownload, error)
	RevertImageUpdate(ctx context.Context, in *core_adapter.ImageDownloadMessage, opts ...grpc.CallOption) (*voltha.ImageDownload, error)
	// Tests
	StartOmciTest(ctx context.Context, in *core_adapter.OMCITest, opts ...grpc.CallOption) (*omci.TestResponse, error)
	SimulateAlarm(ctx context.Context, in *core_adapter.SimulateAlarmMessage, opts ...grpc.CallOption) (*common.OperationResp, error)
	// Events
	SuppressEvent(ctx context.Context, in *voltha.EventFilter, opts ...grpc.CallOption) (*empty.Empty, error)
	UnSuppressEvent(ctx context.Context, in *voltha.EventFilter, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get/Set
	GetExtValue(ctx context.Context, in *core_adapter.GetExtValueMessage, opts ...grpc.CallOption) (*extension.ReturnValues, error)
	SetExtValue(ctx context.Context, in *core_adapter.SetExtValueMessage, opts ...grpc.CallOption) (*empty.Empty, error)
	GetSingleValue(ctx context.Context, in *extension.SingleGetValueRequest, opts ...grpc.CallOption) (*extension.SingleGetValueResponse, error)
	SetSingleValue(ctx context.Context, in *extension.SingleSetValueRequest, opts ...grpc.CallOption) (*extension.SingleSetValueResponse, error)
	GetCustomVlan(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.GetVlanResponse, error)
	GetOltConnect(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.OltConnResponse, error)
	GetOltDeviceInfo(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.OltDevResponse, error)
	SetPmdTxDis(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	GetPmdTxdis(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.PmdTxdisResponse, error)
	GetDevicePmdStatus(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.PmdStatusResponse, error)
	SetDevicePort(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	GetDevicePort(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.GetPortResponse, error)
	PortReset(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	SetMtuSize(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	GetMtuSize(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.MtuSizeResponse, error)
	SetVlan(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	SetLutMode(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	GetLutMode(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ModeResponse, error)
	SetAgingMode(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	GetAgingMode(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ModeResponse, error)
	SetAgingTime(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	GetAgingTime(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.AgingTimeResponse, error)
	GetDeviceMacInfo(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.DevMacInfoResponse, error)
	SetSdnTable(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.SdnTableKeyResponse, error)
	GetSdnTable(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.SdnTableResponse, error)
	SetLength(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	GetLength(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.LengthResponse, error)
	SetQuietZone(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	GetQuietZone(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.QuietZoneResponse, error)
	SetFecMode(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	GetFecMode(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ModeResponse, error)
	AddOnu(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.AddOnuResponse, error)
	DeleteOnu25G(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	AddOnuSla(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	ClearOnuSla(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	GetSlaTable(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.RepeatedSlaResponse, error)
	SetOnuAllocid(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	DelOnuAllocid(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	SetOnuVssn(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	GetOnuVssn(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.OnuVssnResponse, error)
	GetOnuDistance(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.OnuDistResponse, error)
	SetBurstDelimiter(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	GetBurstDelimiter(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.BurstDelimitResponse, error)
	SetBurstPreamble(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	GetBurstPreamble(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.BurstPreambleResponse, error)
	SetBurstVersion(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	GetBurstVersion(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.BurstVersionResponse, error)
	SetBurstProfile(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	GetBurstProfile(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.BurstProfileResponse, error)
	GetRegisterStatus(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.RegisterStatusResponse, error)
	GetOnuInfo(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.OnuInfoResponse, error)
	GetOmciStatus(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.StatusResponse, error)
	SetDsOmciOnu(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	SetDsOmciData(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	GetUsOmciData(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.OmciDataResponse, error)
	SetTod(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	GetTod(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.TodResponse, error)
	SetDataMode(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	GetDataMode(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ModeResponse, error)
	SetFecDecMode(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	GetFecDecMode(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ModeResponse, error)
	SetDelimiter(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	GetDelimiter(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.FecDecResponse, error)
	SetErrorPermit(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	GetErrorPermit(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ErrorPermitResponse, error)
	SetPmControl(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	GetPmControl(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.PmControlResponse, error)
	GetPmTable(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.PmTableResponse, error)
	SetSAOn(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	SetSAOff(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	CreateDeviceHandler(ctx context.Context, in *voltha.Device, opts ...grpc.CallOption) (*empty.Empty, error)
	SetSliceBw(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error)
	GetSliceBw(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.GetSliceBwResponse, error)
	SetSlaV2(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.SlaV2Response, error)
	GetSlaV2(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.SlaV2Response, error)
	SendOmciData(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.BossOmciResponse, error)
}

type adapterServiceClient struct {
	cc *grpc.ClientConn
}

func NewAdapterServiceClient(cc *grpc.ClientConn) AdapterServiceClient {
	return &adapterServiceClient{cc}
}

func (c *adapterServiceClient) GetHealthStatus(ctx context.Context, in *common.Connection, opts ...grpc.CallOption) (*health.HealthStatus, error) {
	out := new(health.HealthStatus)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetHealthStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) AdoptDevice(ctx context.Context, in *voltha.Device, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/AdoptDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) ReconcileDevice(ctx context.Context, in *voltha.Device, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/ReconcileDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) DeleteDevice(ctx context.Context, in *voltha.Device, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/DeleteDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) DisableDevice(ctx context.Context, in *voltha.Device, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/DisableDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) ReEnableDevice(ctx context.Context, in *voltha.Device, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/ReEnableDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) RebootDevice(ctx context.Context, in *voltha.Device, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/RebootDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SelfTestDevice(ctx context.Context, in *voltha.Device, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SelfTestDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetOfpDeviceInfo(ctx context.Context, in *voltha.Device, opts ...grpc.CallOption) (*core_adapter.SwitchCapability, error) {
	out := new(core_adapter.SwitchCapability)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetOfpDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) ChildDeviceLost(ctx context.Context, in *voltha.Device, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/ChildDeviceLost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) EnablePort(ctx context.Context, in *voltha.Port, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/EnablePort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) DisablePort(ctx context.Context, in *voltha.Port, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/DisablePort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) UpdateFlowsBulk(ctx context.Context, in *core_adapter.BulkFlows, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/UpdateFlowsBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) UpdateFlowsIncrementally(ctx context.Context, in *core_adapter.IncrementalFlows, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/UpdateFlowsIncrementally", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SendPacketOut(ctx context.Context, in *core_adapter.PacketOut, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SendPacketOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) UpdatePmConfig(ctx context.Context, in *core_adapter.PmConfigsInfo, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/UpdatePmConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) DownloadOnuImage(ctx context.Context, in *voltha.DeviceImageDownloadRequest, opts ...grpc.CallOption) (*voltha.DeviceImageResponse, error) {
	out := new(voltha.DeviceImageResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/DownloadOnuImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetOnuImageStatus(ctx context.Context, in *voltha.DeviceImageRequest, opts ...grpc.CallOption) (*voltha.DeviceImageResponse, error) {
	out := new(voltha.DeviceImageResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetOnuImageStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) AbortOnuImageUpgrade(ctx context.Context, in *voltha.DeviceImageRequest, opts ...grpc.CallOption) (*voltha.DeviceImageResponse, error) {
	out := new(voltha.DeviceImageResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/AbortOnuImageUpgrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetOnuImages(ctx context.Context, in *common.ID, opts ...grpc.CallOption) (*voltha.OnuImages, error) {
	out := new(voltha.OnuImages)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetOnuImages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) ActivateOnuImage(ctx context.Context, in *voltha.DeviceImageRequest, opts ...grpc.CallOption) (*voltha.DeviceImageResponse, error) {
	out := new(voltha.DeviceImageResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/ActivateOnuImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) CommitOnuImage(ctx context.Context, in *voltha.DeviceImageRequest, opts ...grpc.CallOption) (*voltha.DeviceImageResponse, error) {
	out := new(voltha.DeviceImageResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/CommitOnuImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *adapterServiceClient) DownloadImage(ctx context.Context, in *core_adapter.ImageDownloadMessage, opts ...grpc.CallOption) (*voltha.ImageDownload, error) {
	out := new(voltha.ImageDownload)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/DownloadImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *adapterServiceClient) GetImageDownloadStatus(ctx context.Context, in *core_adapter.ImageDownloadMessage, opts ...grpc.CallOption) (*voltha.ImageDownload, error) {
	out := new(voltha.ImageDownload)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetImageDownloadStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *adapterServiceClient) CancelImageDownload(ctx context.Context, in *core_adapter.ImageDownloadMessage, opts ...grpc.CallOption) (*voltha.ImageDownload, error) {
	out := new(voltha.ImageDownload)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/CancelImageDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *adapterServiceClient) ActivateImageUpdate(ctx context.Context, in *core_adapter.ImageDownloadMessage, opts ...grpc.CallOption) (*voltha.ImageDownload, error) {
	out := new(voltha.ImageDownload)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/ActivateImageUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *adapterServiceClient) RevertImageUpdate(ctx context.Context, in *core_adapter.ImageDownloadMessage, opts ...grpc.CallOption) (*voltha.ImageDownload, error) {
	out := new(voltha.ImageDownload)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/RevertImageUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) StartOmciTest(ctx context.Context, in *core_adapter.OMCITest, opts ...grpc.CallOption) (*omci.TestResponse, error) {
	out := new(omci.TestResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/StartOmciTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SimulateAlarm(ctx context.Context, in *core_adapter.SimulateAlarmMessage, opts ...grpc.CallOption) (*common.OperationResp, error) {
	out := new(common.OperationResp)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SimulateAlarm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SuppressEvent(ctx context.Context, in *voltha.EventFilter, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SuppressEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) UnSuppressEvent(ctx context.Context, in *voltha.EventFilter, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/UnSuppressEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetExtValue(ctx context.Context, in *core_adapter.GetExtValueMessage, opts ...grpc.CallOption) (*extension.ReturnValues, error) {
	out := new(extension.ReturnValues)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetExtValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SetExtValue(ctx context.Context, in *core_adapter.SetExtValueMessage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SetExtValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetSingleValue(ctx context.Context, in *extension.SingleGetValueRequest, opts ...grpc.CallOption) (*extension.SingleGetValueResponse, error) {
	out := new(extension.SingleGetValueResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetSingleValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SetSingleValue(ctx context.Context, in *extension.SingleSetValueRequest, opts ...grpc.CallOption) (*extension.SingleSetValueResponse, error) {
	out := new(extension.SingleSetValueResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SetSingleValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetCustomVlan(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.GetVlanResponse, error) {
	out := new(bossopenolt.GetVlanResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/getCustomVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetOltConnect(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.OltConnResponse, error) {
	out := new(bossopenolt.OltConnResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetOltConnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetOltDeviceInfo(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.OltDevResponse, error) {
	out := new(bossopenolt.OltDevResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetOltDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SetPmdTxDis(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SetPmdTxDis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetPmdTxdis(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.PmdTxdisResponse, error) {
	out := new(bossopenolt.PmdTxdisResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetPmdTxdis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetDevicePmdStatus(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.PmdStatusResponse, error) {
	out := new(bossopenolt.PmdStatusResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetDevicePmdStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SetDevicePort(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SetDevicePort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetDevicePort(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.GetPortResponse, error) {
	out := new(bossopenolt.GetPortResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetDevicePort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) PortReset(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/PortReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SetMtuSize(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SetMtuSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetMtuSize(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.MtuSizeResponse, error) {
	out := new(bossopenolt.MtuSizeResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetMtuSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SetVlan(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SetVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SetLutMode(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SetLutMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetLutMode(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ModeResponse, error) {
	out := new(bossopenolt.ModeResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetLutMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SetAgingMode(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SetAgingMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetAgingMode(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ModeResponse, error) {
	out := new(bossopenolt.ModeResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetAgingMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SetAgingTime(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SetAgingTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetAgingTime(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.AgingTimeResponse, error) {
	out := new(bossopenolt.AgingTimeResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetAgingTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetDeviceMacInfo(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.DevMacInfoResponse, error) {
	out := new(bossopenolt.DevMacInfoResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetDeviceMacInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SetSdnTable(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.SdnTableKeyResponse, error) {
	out := new(bossopenolt.SdnTableKeyResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SetSdnTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetSdnTable(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.SdnTableResponse, error) {
	out := new(bossopenolt.SdnTableResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetSdnTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SetLength(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SetLength", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetLength(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.LengthResponse, error) {
	out := new(bossopenolt.LengthResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetLength", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SetQuietZone(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SetQuietZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetQuietZone(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.QuietZoneResponse, error) {
	out := new(bossopenolt.QuietZoneResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetQuietZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SetFecMode(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SetFecMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetFecMode(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ModeResponse, error) {
	out := new(bossopenolt.ModeResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetFecMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) AddOnu(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.AddOnuResponse, error) {
	out := new(bossopenolt.AddOnuResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/AddOnu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) DeleteOnu25G(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/DeleteOnu25G", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) AddOnuSla(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/AddOnuSla", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) ClearOnuSla(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/ClearOnuSla", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetSlaTable(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.RepeatedSlaResponse, error) {
	out := new(bossopenolt.RepeatedSlaResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetSlaTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SetOnuAllocid(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SetOnuAllocid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) DelOnuAllocid(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/DelOnuAllocid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SetOnuVssn(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SetOnuVssn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetOnuVssn(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.OnuVssnResponse, error) {
	out := new(bossopenolt.OnuVssnResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetOnuVssn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetOnuDistance(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.OnuDistResponse, error) {
	out := new(bossopenolt.OnuDistResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetOnuDistance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SetBurstDelimiter(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SetBurstDelimiter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetBurstDelimiter(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.BurstDelimitResponse, error) {
	out := new(bossopenolt.BurstDelimitResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetBurstDelimiter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SetBurstPreamble(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SetBurstPreamble", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetBurstPreamble(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.BurstPreambleResponse, error) {
	out := new(bossopenolt.BurstPreambleResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetBurstPreamble", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SetBurstVersion(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SetBurstVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetBurstVersion(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.BurstVersionResponse, error) {
	out := new(bossopenolt.BurstVersionResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetBurstVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SetBurstProfile(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SetBurstProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetBurstProfile(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.BurstProfileResponse, error) {
	out := new(bossopenolt.BurstProfileResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetBurstProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetRegisterStatus(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.RegisterStatusResponse, error) {
	out := new(bossopenolt.RegisterStatusResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetRegisterStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetOnuInfo(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.OnuInfoResponse, error) {
	out := new(bossopenolt.OnuInfoResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetOnuInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetOmciStatus(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.StatusResponse, error) {
	out := new(bossopenolt.StatusResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetOmciStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SetDsOmciOnu(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SetDsOmciOnu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SetDsOmciData(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SetDsOmciData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetUsOmciData(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.OmciDataResponse, error) {
	out := new(bossopenolt.OmciDataResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetUsOmciData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SetTod(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SetTod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetTod(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.TodResponse, error) {
	out := new(bossopenolt.TodResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetTod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SetDataMode(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SetDataMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetDataMode(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ModeResponse, error) {
	out := new(bossopenolt.ModeResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetDataMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SetFecDecMode(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SetFecDecMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetFecDecMode(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ModeResponse, error) {
	out := new(bossopenolt.ModeResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetFecDecMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SetDelimiter(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SetDelimiter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetDelimiter(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.FecDecResponse, error) {
	out := new(bossopenolt.FecDecResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetDelimiter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SetErrorPermit(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SetErrorPermit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetErrorPermit(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ErrorPermitResponse, error) {
	out := new(bossopenolt.ErrorPermitResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetErrorPermit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SetPmControl(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SetPmControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetPmControl(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.PmControlResponse, error) {
	out := new(bossopenolt.PmControlResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetPmControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetPmTable(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.PmTableResponse, error) {
	out := new(bossopenolt.PmTableResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetPmTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SetSAOn(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SetSAOn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SetSAOff(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SetSAOff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) CreateDeviceHandler(ctx context.Context, in *voltha.Device, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/Create_device_handler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SetSliceBw(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.ExecResult, error) {
	out := new(bossopenolt.ExecResult)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SetSliceBw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetSliceBw(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.GetSliceBwResponse, error) {
	out := new(bossopenolt.GetSliceBwResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetSliceBw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SetSlaV2(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.SlaV2Response, error) {
	out := new(bossopenolt.SlaV2Response)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SetSlaV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) GetSlaV2(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.SlaV2Response, error) {
	out := new(bossopenolt.SlaV2Response)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/GetSlaV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) SendOmciData(ctx context.Context, in *bossopenolt.BossRequest, opts ...grpc.CallOption) (*bossopenolt.BossOmciResponse, error) {
	out := new(bossopenolt.BossOmciResponse)
	err := c.cc.Invoke(ctx, "/adapter_service.AdapterService/SendOmciData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdapterServiceServer is the server API for AdapterService service.
type AdapterServiceServer interface {
	// GetHealthStatus is used by an AdapterService client to verify connectivity
	// to the gRPC server hosting the AdapterService service
	GetHealthStatus(context.Context, *common.Connection) (*health.HealthStatus, error)
	// Device
	AdoptDevice(context.Context, *voltha.Device) (*empty.Empty, error)
	ReconcileDevice(context.Context, *voltha.Device) (*empty.Empty, error)
	DeleteDevice(context.Context, *voltha.Device) (*empty.Empty, error)
	DisableDevice(context.Context, *voltha.Device) (*empty.Empty, error)
	ReEnableDevice(context.Context, *voltha.Device) (*empty.Empty, error)
	RebootDevice(context.Context, *voltha.Device) (*empty.Empty, error)
	SelfTestDevice(context.Context, *voltha.Device) (*empty.Empty, error)
	GetOfpDeviceInfo(context.Context, *voltha.Device) (*core_adapter.SwitchCapability, error)
	ChildDeviceLost(context.Context, *voltha.Device) (*empty.Empty, error)
	// Ports
	EnablePort(context.Context, *voltha.Port) (*empty.Empty, error)
	DisablePort(context.Context, *voltha.Port) (*empty.Empty, error)
	// Flows
	UpdateFlowsBulk(context.Context, *core_adapter.BulkFlows) (*empty.Empty, error)
	UpdateFlowsIncrementally(context.Context, *core_adapter.IncrementalFlows) (*empty.Empty, error)
	//Packets
	SendPacketOut(context.Context, *core_adapter.PacketOut) (*empty.Empty, error)
	// PM
	UpdatePmConfig(context.Context, *core_adapter.PmConfigsInfo) (*empty.Empty, error)
	// Image
	DownloadOnuImage(context.Context, *voltha.DeviceImageDownloadRequest) (*voltha.DeviceImageResponse, error)
	GetOnuImageStatus(context.Context, *voltha.DeviceImageRequest) (*voltha.DeviceImageResponse, error)
	AbortOnuImageUpgrade(context.Context, *voltha.DeviceImageRequest) (*voltha.DeviceImageResponse, error)
	GetOnuImages(context.Context, *common.ID) (*voltha.OnuImages, error)
	ActivateOnuImage(context.Context, *voltha.DeviceImageRequest) (*voltha.DeviceImageResponse, error)
	CommitOnuImage(context.Context, *voltha.DeviceImageRequest) (*voltha.DeviceImageResponse, error)
	// Deprecated Image APIs
	DownloadImage(context.Context, *core_adapter.ImageDownloadMessage) (*voltha.ImageDownload, error)
	GetImageDownloadStatus(context.Context, *core_adapter.ImageDownloadMessage) (*voltha.ImageDownload, error)
	CancelImageDownload(context.Context, *core_adapter.ImageDownloadMessage) (*voltha.ImageDownload, error)
	ActivateImageUpdate(context.Context, *core_adapter.ImageDownloadMessage) (*voltha.ImageDownload, error)
	RevertImageUpdate(context.Context, *core_adapter.ImageDownloadMessage) (*voltha.ImageDownload, error)
	// Tests
	StartOmciTest(context.Context, *core_adapter.OMCITest) (*omci.TestResponse, error)
	SimulateAlarm(context.Context, *core_adapter.SimulateAlarmMessage) (*common.OperationResp, error)
	// Events
	SuppressEvent(context.Context, *voltha.EventFilter) (*empty.Empty, error)
	UnSuppressEvent(context.Context, *voltha.EventFilter) (*empty.Empty, error)
	// Get/Set
	GetExtValue(context.Context, *core_adapter.GetExtValueMessage) (*extension.ReturnValues, error)
	SetExtValue(context.Context, *core_adapter.SetExtValueMessage) (*empty.Empty, error)
	GetSingleValue(context.Context, *extension.SingleGetValueRequest) (*extension.SingleGetValueResponse, error)
	SetSingleValue(context.Context, *extension.SingleSetValueRequest) (*extension.SingleSetValueResponse, error)
	GetCustomVlan(context.Context, *bossopenolt.BossRequest) (*bossopenolt.GetVlanResponse, error)
	GetOltConnect(context.Context, *bossopenolt.BossRequest) (*bossopenolt.OltConnResponse, error)
	GetOltDeviceInfo(context.Context, *bossopenolt.BossRequest) (*bossopenolt.OltDevResponse, error)
	SetPmdTxDis(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	GetPmdTxdis(context.Context, *bossopenolt.BossRequest) (*bossopenolt.PmdTxdisResponse, error)
	GetDevicePmdStatus(context.Context, *bossopenolt.BossRequest) (*bossopenolt.PmdStatusResponse, error)
	SetDevicePort(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	GetDevicePort(context.Context, *bossopenolt.BossRequest) (*bossopenolt.GetPortResponse, error)
	PortReset(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	SetMtuSize(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	GetMtuSize(context.Context, *bossopenolt.BossRequest) (*bossopenolt.MtuSizeResponse, error)
	SetVlan(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	SetLutMode(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	GetLutMode(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ModeResponse, error)
	SetAgingMode(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	GetAgingMode(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ModeResponse, error)
	SetAgingTime(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	GetAgingTime(context.Context, *bossopenolt.BossRequest) (*bossopenolt.AgingTimeResponse, error)
	GetDeviceMacInfo(context.Context, *bossopenolt.BossRequest) (*bossopenolt.DevMacInfoResponse, error)
	SetSdnTable(context.Context, *bossopenolt.BossRequest) (*bossopenolt.SdnTableKeyResponse, error)
	GetSdnTable(context.Context, *bossopenolt.BossRequest) (*bossopenolt.SdnTableResponse, error)
	SetLength(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	GetLength(context.Context, *bossopenolt.BossRequest) (*bossopenolt.LengthResponse, error)
	SetQuietZone(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	GetQuietZone(context.Context, *bossopenolt.BossRequest) (*bossopenolt.QuietZoneResponse, error)
	SetFecMode(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	GetFecMode(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ModeResponse, error)
	AddOnu(context.Context, *bossopenolt.BossRequest) (*bossopenolt.AddOnuResponse, error)
	DeleteOnu25G(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	AddOnuSla(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	ClearOnuSla(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	GetSlaTable(context.Context, *bossopenolt.BossRequest) (*bossopenolt.RepeatedSlaResponse, error)
	SetOnuAllocid(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	DelOnuAllocid(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	SetOnuVssn(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	GetOnuVssn(context.Context, *bossopenolt.BossRequest) (*bossopenolt.OnuVssnResponse, error)
	GetOnuDistance(context.Context, *bossopenolt.BossRequest) (*bossopenolt.OnuDistResponse, error)
	SetBurstDelimiter(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	GetBurstDelimiter(context.Context, *bossopenolt.BossRequest) (*bossopenolt.BurstDelimitResponse, error)
	SetBurstPreamble(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	GetBurstPreamble(context.Context, *bossopenolt.BossRequest) (*bossopenolt.BurstPreambleResponse, error)
	SetBurstVersion(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	GetBurstVersion(context.Context, *bossopenolt.BossRequest) (*bossopenolt.BurstVersionResponse, error)
	SetBurstProfile(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	GetBurstProfile(context.Context, *bossopenolt.BossRequest) (*bossopenolt.BurstProfileResponse, error)
	GetRegisterStatus(context.Context, *bossopenolt.BossRequest) (*bossopenolt.RegisterStatusResponse, error)
	GetOnuInfo(context.Context, *bossopenolt.BossRequest) (*bossopenolt.OnuInfoResponse, error)
	GetOmciStatus(context.Context, *bossopenolt.BossRequest) (*bossopenolt.StatusResponse, error)
	SetDsOmciOnu(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	SetDsOmciData(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	GetUsOmciData(context.Context, *bossopenolt.BossRequest) (*bossopenolt.OmciDataResponse, error)
	SetTod(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	GetTod(context.Context, *bossopenolt.BossRequest) (*bossopenolt.TodResponse, error)
	SetDataMode(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	GetDataMode(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ModeResponse, error)
	SetFecDecMode(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	GetFecDecMode(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ModeResponse, error)
	SetDelimiter(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	GetDelimiter(context.Context, *bossopenolt.BossRequest) (*bossopenolt.FecDecResponse, error)
	SetErrorPermit(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	GetErrorPermit(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ErrorPermitResponse, error)
	SetPmControl(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	GetPmControl(context.Context, *bossopenolt.BossRequest) (*bossopenolt.PmControlResponse, error)
	GetPmTable(context.Context, *bossopenolt.BossRequest) (*bossopenolt.PmTableResponse, error)
	SetSAOn(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	SetSAOff(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	CreateDeviceHandler(context.Context, *voltha.Device) (*empty.Empty, error)
	SetSliceBw(context.Context, *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error)
	GetSliceBw(context.Context, *bossopenolt.BossRequest) (*bossopenolt.GetSliceBwResponse, error)
	SetSlaV2(context.Context, *bossopenolt.BossRequest) (*bossopenolt.SlaV2Response, error)
	GetSlaV2(context.Context, *bossopenolt.BossRequest) (*bossopenolt.SlaV2Response, error)
	SendOmciData(context.Context, *bossopenolt.BossRequest) (*bossopenolt.BossOmciResponse, error)
}

// UnimplementedAdapterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAdapterServiceServer struct {
}

func (*UnimplementedAdapterServiceServer) GetHealthStatus(ctx context.Context, req *common.Connection) (*health.HealthStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealthStatus not implemented")
}
func (*UnimplementedAdapterServiceServer) AdoptDevice(ctx context.Context, req *voltha.Device) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdoptDevice not implemented")
}
func (*UnimplementedAdapterServiceServer) ReconcileDevice(ctx context.Context, req *voltha.Device) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReconcileDevice not implemented")
}
func (*UnimplementedAdapterServiceServer) DeleteDevice(ctx context.Context, req *voltha.Device) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (*UnimplementedAdapterServiceServer) DisableDevice(ctx context.Context, req *voltha.Device) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableDevice not implemented")
}
func (*UnimplementedAdapterServiceServer) ReEnableDevice(ctx context.Context, req *voltha.Device) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReEnableDevice not implemented")
}
func (*UnimplementedAdapterServiceServer) RebootDevice(ctx context.Context, req *voltha.Device) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebootDevice not implemented")
}
func (*UnimplementedAdapterServiceServer) SelfTestDevice(ctx context.Context, req *voltha.Device) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelfTestDevice not implemented")
}
func (*UnimplementedAdapterServiceServer) GetOfpDeviceInfo(ctx context.Context, req *voltha.Device) (*core_adapter.SwitchCapability, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOfpDeviceInfo not implemented")
}
func (*UnimplementedAdapterServiceServer) ChildDeviceLost(ctx context.Context, req *voltha.Device) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChildDeviceLost not implemented")
}
func (*UnimplementedAdapterServiceServer) EnablePort(ctx context.Context, req *voltha.Port) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnablePort not implemented")
}
func (*UnimplementedAdapterServiceServer) DisablePort(ctx context.Context, req *voltha.Port) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisablePort not implemented")
}
func (*UnimplementedAdapterServiceServer) UpdateFlowsBulk(ctx context.Context, req *core_adapter.BulkFlows) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlowsBulk not implemented")
}
func (*UnimplementedAdapterServiceServer) UpdateFlowsIncrementally(ctx context.Context, req *core_adapter.IncrementalFlows) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlowsIncrementally not implemented")
}
func (*UnimplementedAdapterServiceServer) SendPacketOut(ctx context.Context, req *core_adapter.PacketOut) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPacketOut not implemented")
}
func (*UnimplementedAdapterServiceServer) UpdatePmConfig(ctx context.Context, req *core_adapter.PmConfigsInfo) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePmConfig not implemented")
}
func (*UnimplementedAdapterServiceServer) DownloadOnuImage(ctx context.Context, req *voltha.DeviceImageDownloadRequest) (*voltha.DeviceImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadOnuImage not implemented")
}
func (*UnimplementedAdapterServiceServer) GetOnuImageStatus(ctx context.Context, req *voltha.DeviceImageRequest) (*voltha.DeviceImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnuImageStatus not implemented")
}
func (*UnimplementedAdapterServiceServer) AbortOnuImageUpgrade(ctx context.Context, req *voltha.DeviceImageRequest) (*voltha.DeviceImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortOnuImageUpgrade not implemented")
}
func (*UnimplementedAdapterServiceServer) GetOnuImages(ctx context.Context, req *common.ID) (*voltha.OnuImages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnuImages not implemented")
}
func (*UnimplementedAdapterServiceServer) ActivateOnuImage(ctx context.Context, req *voltha.DeviceImageRequest) (*voltha.DeviceImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateOnuImage not implemented")
}
func (*UnimplementedAdapterServiceServer) CommitOnuImage(ctx context.Context, req *voltha.DeviceImageRequest) (*voltha.DeviceImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitOnuImage not implemented")
}
func (*UnimplementedAdapterServiceServer) DownloadImage(ctx context.Context, req *core_adapter.ImageDownloadMessage) (*voltha.ImageDownload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadImage not implemented")
}
func (*UnimplementedAdapterServiceServer) GetImageDownloadStatus(ctx context.Context, req *core_adapter.ImageDownloadMessage) (*voltha.ImageDownload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageDownloadStatus not implemented")
}
func (*UnimplementedAdapterServiceServer) CancelImageDownload(ctx context.Context, req *core_adapter.ImageDownloadMessage) (*voltha.ImageDownload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelImageDownload not implemented")
}
func (*UnimplementedAdapterServiceServer) ActivateImageUpdate(ctx context.Context, req *core_adapter.ImageDownloadMessage) (*voltha.ImageDownload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateImageUpdate not implemented")
}
func (*UnimplementedAdapterServiceServer) RevertImageUpdate(ctx context.Context, req *core_adapter.ImageDownloadMessage) (*voltha.ImageDownload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevertImageUpdate not implemented")
}
func (*UnimplementedAdapterServiceServer) StartOmciTest(ctx context.Context, req *core_adapter.OMCITest) (*omci.TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartOmciTest not implemented")
}
func (*UnimplementedAdapterServiceServer) SimulateAlarm(ctx context.Context, req *core_adapter.SimulateAlarmMessage) (*common.OperationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulateAlarm not implemented")
}
func (*UnimplementedAdapterServiceServer) SuppressEvent(ctx context.Context, req *voltha.EventFilter) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuppressEvent not implemented")
}
func (*UnimplementedAdapterServiceServer) UnSuppressEvent(ctx context.Context, req *voltha.EventFilter) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnSuppressEvent not implemented")
}
func (*UnimplementedAdapterServiceServer) GetExtValue(ctx context.Context, req *core_adapter.GetExtValueMessage) (*extension.ReturnValues, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtValue not implemented")
}
func (*UnimplementedAdapterServiceServer) SetExtValue(ctx context.Context, req *core_adapter.SetExtValueMessage) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetExtValue not implemented")
}
func (*UnimplementedAdapterServiceServer) GetSingleValue(ctx context.Context, req *extension.SingleGetValueRequest) (*extension.SingleGetValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleValue not implemented")
}
func (*UnimplementedAdapterServiceServer) SetSingleValue(ctx context.Context, req *extension.SingleSetValueRequest) (*extension.SingleSetValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSingleValue not implemented")
}
func (*UnimplementedAdapterServiceServer) GetCustomVlan(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.GetVlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomVlan not implemented")
}
func (*UnimplementedAdapterServiceServer) GetOltConnect(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.OltConnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOltConnect not implemented")
}
func (*UnimplementedAdapterServiceServer) GetOltDeviceInfo(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.OltDevResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOltDeviceInfo not implemented")
}
func (*UnimplementedAdapterServiceServer) SetPmdTxDis(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPmdTxDis not implemented")
}
func (*UnimplementedAdapterServiceServer) GetPmdTxdis(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.PmdTxdisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPmdTxdis not implemented")
}
func (*UnimplementedAdapterServiceServer) GetDevicePmdStatus(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.PmdStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevicePmdStatus not implemented")
}
func (*UnimplementedAdapterServiceServer) SetDevicePort(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDevicePort not implemented")
}
func (*UnimplementedAdapterServiceServer) GetDevicePort(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.GetPortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevicePort not implemented")
}
func (*UnimplementedAdapterServiceServer) PortReset(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PortReset not implemented")
}
func (*UnimplementedAdapterServiceServer) SetMtuSize(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMtuSize not implemented")
}
func (*UnimplementedAdapterServiceServer) GetMtuSize(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.MtuSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMtuSize not implemented")
}
func (*UnimplementedAdapterServiceServer) SetVlan(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVlan not implemented")
}
func (*UnimplementedAdapterServiceServer) SetLutMode(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLutMode not implemented")
}
func (*UnimplementedAdapterServiceServer) GetLutMode(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLutMode not implemented")
}
func (*UnimplementedAdapterServiceServer) SetAgingMode(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAgingMode not implemented")
}
func (*UnimplementedAdapterServiceServer) GetAgingMode(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgingMode not implemented")
}
func (*UnimplementedAdapterServiceServer) SetAgingTime(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAgingTime not implemented")
}
func (*UnimplementedAdapterServiceServer) GetAgingTime(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.AgingTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgingTime not implemented")
}
func (*UnimplementedAdapterServiceServer) GetDeviceMacInfo(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.DevMacInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceMacInfo not implemented")
}
func (*UnimplementedAdapterServiceServer) SetSdnTable(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.SdnTableKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSdnTable not implemented")
}
func (*UnimplementedAdapterServiceServer) GetSdnTable(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.SdnTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSdnTable not implemented")
}
func (*UnimplementedAdapterServiceServer) SetLength(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLength not implemented")
}
func (*UnimplementedAdapterServiceServer) GetLength(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.LengthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLength not implemented")
}
func (*UnimplementedAdapterServiceServer) SetQuietZone(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetQuietZone not implemented")
}
func (*UnimplementedAdapterServiceServer) GetQuietZone(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.QuietZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuietZone not implemented")
}
func (*UnimplementedAdapterServiceServer) SetFecMode(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFecMode not implemented")
}
func (*UnimplementedAdapterServiceServer) GetFecMode(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFecMode not implemented")
}
func (*UnimplementedAdapterServiceServer) AddOnu(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.AddOnuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOnu not implemented")
}
func (*UnimplementedAdapterServiceServer) DeleteOnu25G(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOnu25G not implemented")
}
func (*UnimplementedAdapterServiceServer) AddOnuSla(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOnuSla not implemented")
}
func (*UnimplementedAdapterServiceServer) ClearOnuSla(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearOnuSla not implemented")
}
func (*UnimplementedAdapterServiceServer) GetSlaTable(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.RepeatedSlaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlaTable not implemented")
}
func (*UnimplementedAdapterServiceServer) SetOnuAllocid(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOnuAllocid not implemented")
}
func (*UnimplementedAdapterServiceServer) DelOnuAllocid(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOnuAllocid not implemented")
}
func (*UnimplementedAdapterServiceServer) SetOnuVssn(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOnuVssn not implemented")
}
func (*UnimplementedAdapterServiceServer) GetOnuVssn(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.OnuVssnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnuVssn not implemented")
}
func (*UnimplementedAdapterServiceServer) GetOnuDistance(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.OnuDistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnuDistance not implemented")
}
func (*UnimplementedAdapterServiceServer) SetBurstDelimiter(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBurstDelimiter not implemented")
}
func (*UnimplementedAdapterServiceServer) GetBurstDelimiter(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.BurstDelimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBurstDelimiter not implemented")
}
func (*UnimplementedAdapterServiceServer) SetBurstPreamble(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBurstPreamble not implemented")
}
func (*UnimplementedAdapterServiceServer) GetBurstPreamble(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.BurstPreambleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBurstPreamble not implemented")
}
func (*UnimplementedAdapterServiceServer) SetBurstVersion(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBurstVersion not implemented")
}
func (*UnimplementedAdapterServiceServer) GetBurstVersion(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.BurstVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBurstVersion not implemented")
}
func (*UnimplementedAdapterServiceServer) SetBurstProfile(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBurstProfile not implemented")
}
func (*UnimplementedAdapterServiceServer) GetBurstProfile(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.BurstProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBurstProfile not implemented")
}
func (*UnimplementedAdapterServiceServer) GetRegisterStatus(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.RegisterStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegisterStatus not implemented")
}
func (*UnimplementedAdapterServiceServer) GetOnuInfo(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.OnuInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnuInfo not implemented")
}
func (*UnimplementedAdapterServiceServer) GetOmciStatus(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOmciStatus not implemented")
}
func (*UnimplementedAdapterServiceServer) SetDsOmciOnu(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDsOmciOnu not implemented")
}
func (*UnimplementedAdapterServiceServer) SetDsOmciData(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDsOmciData not implemented")
}
func (*UnimplementedAdapterServiceServer) GetUsOmciData(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.OmciDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsOmciData not implemented")
}
func (*UnimplementedAdapterServiceServer) SetTod(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTod not implemented")
}
func (*UnimplementedAdapterServiceServer) GetTod(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.TodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTod not implemented")
}
func (*UnimplementedAdapterServiceServer) SetDataMode(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDataMode not implemented")
}
func (*UnimplementedAdapterServiceServer) GetDataMode(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataMode not implemented")
}
func (*UnimplementedAdapterServiceServer) SetFecDecMode(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFecDecMode not implemented")
}
func (*UnimplementedAdapterServiceServer) GetFecDecMode(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFecDecMode not implemented")
}
func (*UnimplementedAdapterServiceServer) SetDelimiter(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDelimiter not implemented")
}
func (*UnimplementedAdapterServiceServer) GetDelimiter(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.FecDecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelimiter not implemented")
}
func (*UnimplementedAdapterServiceServer) SetErrorPermit(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetErrorPermit not implemented")
}
func (*UnimplementedAdapterServiceServer) GetErrorPermit(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ErrorPermitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetErrorPermit not implemented")
}
func (*UnimplementedAdapterServiceServer) SetPmControl(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPmControl not implemented")
}
func (*UnimplementedAdapterServiceServer) GetPmControl(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.PmControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPmControl not implemented")
}
func (*UnimplementedAdapterServiceServer) GetPmTable(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.PmTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPmTable not implemented")
}
func (*UnimplementedAdapterServiceServer) SetSAOn(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSAOn not implemented")
}
func (*UnimplementedAdapterServiceServer) SetSAOff(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSAOff not implemented")
}
func (*UnimplementedAdapterServiceServer) CreateDeviceHandler(ctx context.Context, req *voltha.Device) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceHandler not implemented")
}
func (*UnimplementedAdapterServiceServer) SetSliceBw(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.ExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSliceBw not implemented")
}
func (*UnimplementedAdapterServiceServer) GetSliceBw(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.GetSliceBwResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSliceBw not implemented")
}
func (*UnimplementedAdapterServiceServer) SetSlaV2(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.SlaV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSlaV2 not implemented")
}
func (*UnimplementedAdapterServiceServer) GetSlaV2(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.SlaV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlaV2 not implemented")
}
func (*UnimplementedAdapterServiceServer) SendOmciData(ctx context.Context, req *bossopenolt.BossRequest) (*bossopenolt.BossOmciResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOmciData not implemented")
}

func RegisterAdapterServiceServer(s *grpc.Server, srv AdapterServiceServer) {
	s.RegisterService(&_AdapterService_serviceDesc, srv)
}

func _AdapterService_GetHealthStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Connection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetHealthStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetHealthStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetHealthStatus(ctx, req.(*common.Connection))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_AdoptDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(voltha.Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).AdoptDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/AdoptDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).AdoptDevice(ctx, req.(*voltha.Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_ReconcileDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(voltha.Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).ReconcileDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/ReconcileDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).ReconcileDevice(ctx, req.(*voltha.Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(voltha.Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).DeleteDevice(ctx, req.(*voltha.Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_DisableDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(voltha.Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).DisableDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/DisableDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).DisableDevice(ctx, req.(*voltha.Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_ReEnableDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(voltha.Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).ReEnableDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/ReEnableDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).ReEnableDevice(ctx, req.(*voltha.Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_RebootDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(voltha.Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).RebootDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/RebootDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).RebootDevice(ctx, req.(*voltha.Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SelfTestDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(voltha.Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SelfTestDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SelfTestDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SelfTestDevice(ctx, req.(*voltha.Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetOfpDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(voltha.Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetOfpDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetOfpDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetOfpDeviceInfo(ctx, req.(*voltha.Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_ChildDeviceLost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(voltha.Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).ChildDeviceLost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/ChildDeviceLost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).ChildDeviceLost(ctx, req.(*voltha.Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_EnablePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(voltha.Port)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).EnablePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/EnablePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).EnablePort(ctx, req.(*voltha.Port))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_DisablePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(voltha.Port)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).DisablePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/DisablePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).DisablePort(ctx, req.(*voltha.Port))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_UpdateFlowsBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core_adapter.BulkFlows)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).UpdateFlowsBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/UpdateFlowsBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).UpdateFlowsBulk(ctx, req.(*core_adapter.BulkFlows))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_UpdateFlowsIncrementally_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core_adapter.IncrementalFlows)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).UpdateFlowsIncrementally(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/UpdateFlowsIncrementally",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).UpdateFlowsIncrementally(ctx, req.(*core_adapter.IncrementalFlows))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SendPacketOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core_adapter.PacketOut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SendPacketOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SendPacketOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SendPacketOut(ctx, req.(*core_adapter.PacketOut))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_UpdatePmConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core_adapter.PmConfigsInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).UpdatePmConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/UpdatePmConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).UpdatePmConfig(ctx, req.(*core_adapter.PmConfigsInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_DownloadOnuImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(voltha.DeviceImageDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).DownloadOnuImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/DownloadOnuImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).DownloadOnuImage(ctx, req.(*voltha.DeviceImageDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetOnuImageStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(voltha.DeviceImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetOnuImageStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetOnuImageStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetOnuImageStatus(ctx, req.(*voltha.DeviceImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_AbortOnuImageUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(voltha.DeviceImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).AbortOnuImageUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/AbortOnuImageUpgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).AbortOnuImageUpgrade(ctx, req.(*voltha.DeviceImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetOnuImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetOnuImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetOnuImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetOnuImages(ctx, req.(*common.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_ActivateOnuImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(voltha.DeviceImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).ActivateOnuImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/ActivateOnuImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).ActivateOnuImage(ctx, req.(*voltha.DeviceImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_CommitOnuImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(voltha.DeviceImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).CommitOnuImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/CommitOnuImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).CommitOnuImage(ctx, req.(*voltha.DeviceImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_DownloadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core_adapter.ImageDownloadMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).DownloadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/DownloadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).DownloadImage(ctx, req.(*core_adapter.ImageDownloadMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetImageDownloadStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core_adapter.ImageDownloadMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetImageDownloadStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetImageDownloadStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetImageDownloadStatus(ctx, req.(*core_adapter.ImageDownloadMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_CancelImageDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core_adapter.ImageDownloadMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).CancelImageDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/CancelImageDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).CancelImageDownload(ctx, req.(*core_adapter.ImageDownloadMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_ActivateImageUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core_adapter.ImageDownloadMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).ActivateImageUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/ActivateImageUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).ActivateImageUpdate(ctx, req.(*core_adapter.ImageDownloadMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_RevertImageUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core_adapter.ImageDownloadMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).RevertImageUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/RevertImageUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).RevertImageUpdate(ctx, req.(*core_adapter.ImageDownloadMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_StartOmciTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core_adapter.OMCITest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).StartOmciTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/StartOmciTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).StartOmciTest(ctx, req.(*core_adapter.OMCITest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SimulateAlarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core_adapter.SimulateAlarmMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SimulateAlarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SimulateAlarm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SimulateAlarm(ctx, req.(*core_adapter.SimulateAlarmMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SuppressEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(voltha.EventFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SuppressEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SuppressEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SuppressEvent(ctx, req.(*voltha.EventFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_UnSuppressEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(voltha.EventFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).UnSuppressEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/UnSuppressEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).UnSuppressEvent(ctx, req.(*voltha.EventFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetExtValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core_adapter.GetExtValueMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetExtValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetExtValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetExtValue(ctx, req.(*core_adapter.GetExtValueMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SetExtValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core_adapter.SetExtValueMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SetExtValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SetExtValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SetExtValue(ctx, req.(*core_adapter.SetExtValueMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetSingleValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(extension.SingleGetValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetSingleValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetSingleValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetSingleValue(ctx, req.(*extension.SingleGetValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SetSingleValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(extension.SingleSetValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SetSingleValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SetSingleValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SetSingleValue(ctx, req.(*extension.SingleSetValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetCustomVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetCustomVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetCustomVlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetCustomVlan(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetOltConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetOltConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetOltConnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetOltConnect(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetOltDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetOltDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetOltDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetOltDeviceInfo(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SetPmdTxDis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SetPmdTxDis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SetPmdTxDis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SetPmdTxDis(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetPmdTxdis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetPmdTxdis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetPmdTxdis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetPmdTxdis(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetDevicePmdStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetDevicePmdStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetDevicePmdStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetDevicePmdStatus(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SetDevicePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SetDevicePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SetDevicePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SetDevicePort(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetDevicePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetDevicePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetDevicePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetDevicePort(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_PortReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).PortReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/PortReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).PortReset(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SetMtuSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SetMtuSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SetMtuSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SetMtuSize(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetMtuSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetMtuSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetMtuSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetMtuSize(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SetVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SetVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SetVlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SetVlan(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SetLutMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SetLutMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SetLutMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SetLutMode(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetLutMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetLutMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetLutMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetLutMode(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SetAgingMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SetAgingMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SetAgingMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SetAgingMode(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetAgingMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetAgingMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetAgingMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetAgingMode(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SetAgingTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SetAgingTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SetAgingTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SetAgingTime(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetAgingTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetAgingTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetAgingTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetAgingTime(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetDeviceMacInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetDeviceMacInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetDeviceMacInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetDeviceMacInfo(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SetSdnTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SetSdnTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SetSdnTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SetSdnTable(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetSdnTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetSdnTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetSdnTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetSdnTable(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SetLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SetLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SetLength",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SetLength(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetLength",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetLength(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SetQuietZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SetQuietZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SetQuietZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SetQuietZone(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetQuietZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetQuietZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetQuietZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetQuietZone(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SetFecMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SetFecMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SetFecMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SetFecMode(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetFecMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetFecMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetFecMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetFecMode(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_AddOnu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).AddOnu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/AddOnu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).AddOnu(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_DeleteOnu25G_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).DeleteOnu25G(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/DeleteOnu25G",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).DeleteOnu25G(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_AddOnuSla_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).AddOnuSla(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/AddOnuSla",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).AddOnuSla(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_ClearOnuSla_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).ClearOnuSla(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/ClearOnuSla",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).ClearOnuSla(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetSlaTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetSlaTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetSlaTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetSlaTable(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SetOnuAllocid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SetOnuAllocid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SetOnuAllocid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SetOnuAllocid(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_DelOnuAllocid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).DelOnuAllocid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/DelOnuAllocid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).DelOnuAllocid(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SetOnuVssn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SetOnuVssn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SetOnuVssn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SetOnuVssn(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetOnuVssn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetOnuVssn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetOnuVssn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetOnuVssn(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetOnuDistance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetOnuDistance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetOnuDistance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetOnuDistance(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SetBurstDelimiter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SetBurstDelimiter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SetBurstDelimiter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SetBurstDelimiter(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetBurstDelimiter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetBurstDelimiter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetBurstDelimiter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetBurstDelimiter(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SetBurstPreamble_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SetBurstPreamble(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SetBurstPreamble",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SetBurstPreamble(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetBurstPreamble_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetBurstPreamble(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetBurstPreamble",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetBurstPreamble(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SetBurstVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SetBurstVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SetBurstVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SetBurstVersion(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetBurstVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetBurstVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetBurstVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetBurstVersion(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SetBurstProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SetBurstProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SetBurstProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SetBurstProfile(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetBurstProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetBurstProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetBurstProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetBurstProfile(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetRegisterStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetRegisterStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetRegisterStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetRegisterStatus(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetOnuInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetOnuInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetOnuInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetOnuInfo(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetOmciStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetOmciStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetOmciStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetOmciStatus(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SetDsOmciOnu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SetDsOmciOnu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SetDsOmciOnu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SetDsOmciOnu(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SetDsOmciData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SetDsOmciData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SetDsOmciData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SetDsOmciData(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetUsOmciData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetUsOmciData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetUsOmciData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetUsOmciData(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SetTod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SetTod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SetTod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SetTod(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetTod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetTod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetTod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetTod(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SetDataMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SetDataMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SetDataMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SetDataMode(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetDataMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetDataMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetDataMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetDataMode(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SetFecDecMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SetFecDecMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SetFecDecMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SetFecDecMode(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetFecDecMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetFecDecMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetFecDecMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetFecDecMode(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SetDelimiter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SetDelimiter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SetDelimiter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SetDelimiter(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetDelimiter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetDelimiter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetDelimiter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetDelimiter(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SetErrorPermit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SetErrorPermit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SetErrorPermit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SetErrorPermit(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetErrorPermit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetErrorPermit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetErrorPermit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetErrorPermit(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SetPmControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SetPmControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SetPmControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SetPmControl(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetPmControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetPmControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetPmControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetPmControl(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetPmTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetPmTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetPmTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetPmTable(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SetSAOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SetSAOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SetSAOn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SetSAOn(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SetSAOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SetSAOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SetSAOff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SetSAOff(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_CreateDeviceHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(voltha.Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).CreateDeviceHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/CreateDeviceHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).CreateDeviceHandler(ctx, req.(*voltha.Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SetSliceBw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SetSliceBw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SetSliceBw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SetSliceBw(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetSliceBw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetSliceBw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetSliceBw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetSliceBw(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SetSlaV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SetSlaV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SetSlaV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SetSlaV2(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_GetSlaV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).GetSlaV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/GetSlaV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).GetSlaV2(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_SendOmciData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bossopenolt.BossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).SendOmciData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter_service.AdapterService/SendOmciData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).SendOmciData(ctx, req.(*bossopenolt.BossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdapterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "adapter_service.AdapterService",
	HandlerType: (*AdapterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHealthStatus",
			Handler:    _AdapterService_GetHealthStatus_Handler,
		},
		{
			MethodName: "AdoptDevice",
			Handler:    _AdapterService_AdoptDevice_Handler,
		},
		{
			MethodName: "ReconcileDevice",
			Handler:    _AdapterService_ReconcileDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _AdapterService_DeleteDevice_Handler,
		},
		{
			MethodName: "DisableDevice",
			Handler:    _AdapterService_DisableDevice_Handler,
		},
		{
			MethodName: "ReEnableDevice",
			Handler:    _AdapterService_ReEnableDevice_Handler,
		},
		{
			MethodName: "RebootDevice",
			Handler:    _AdapterService_RebootDevice_Handler,
		},
		{
			MethodName: "SelfTestDevice",
			Handler:    _AdapterService_SelfTestDevice_Handler,
		},
		{
			MethodName: "GetOfpDeviceInfo",
			Handler:    _AdapterService_GetOfpDeviceInfo_Handler,
		},
		{
			MethodName: "ChildDeviceLost",
			Handler:    _AdapterService_ChildDeviceLost_Handler,
		},
		{
			MethodName: "EnablePort",
			Handler:    _AdapterService_EnablePort_Handler,
		},
		{
			MethodName: "DisablePort",
			Handler:    _AdapterService_DisablePort_Handler,
		},
		{
			MethodName: "UpdateFlowsBulk",
			Handler:    _AdapterService_UpdateFlowsBulk_Handler,
		},
		{
			MethodName: "UpdateFlowsIncrementally",
			Handler:    _AdapterService_UpdateFlowsIncrementally_Handler,
		},
		{
			MethodName: "SendPacketOut",
			Handler:    _AdapterService_SendPacketOut_Handler,
		},
		{
			MethodName: "UpdatePmConfig",
			Handler:    _AdapterService_UpdatePmConfig_Handler,
		},
		{
			MethodName: "DownloadOnuImage",
			Handler:    _AdapterService_DownloadOnuImage_Handler,
		},
		{
			MethodName: "GetOnuImageStatus",
			Handler:    _AdapterService_GetOnuImageStatus_Handler,
		},
		{
			MethodName: "AbortOnuImageUpgrade",
			Handler:    _AdapterService_AbortOnuImageUpgrade_Handler,
		},
		{
			MethodName: "GetOnuImages",
			Handler:    _AdapterService_GetOnuImages_Handler,
		},
		{
			MethodName: "ActivateOnuImage",
			Handler:    _AdapterService_ActivateOnuImage_Handler,
		},
		{
			MethodName: "CommitOnuImage",
			Handler:    _AdapterService_CommitOnuImage_Handler,
		},
		{
			MethodName: "DownloadImage",
			Handler:    _AdapterService_DownloadImage_Handler,
		},
		{
			MethodName: "GetImageDownloadStatus",
			Handler:    _AdapterService_GetImageDownloadStatus_Handler,
		},
		{
			MethodName: "CancelImageDownload",
			Handler:    _AdapterService_CancelImageDownload_Handler,
		},
		{
			MethodName: "ActivateImageUpdate",
			Handler:    _AdapterService_ActivateImageUpdate_Handler,
		},
		{
			MethodName: "RevertImageUpdate",
			Handler:    _AdapterService_RevertImageUpdate_Handler,
		},
		{
			MethodName: "StartOmciTest",
			Handler:    _AdapterService_StartOmciTest_Handler,
		},
		{
			MethodName: "SimulateAlarm",
			Handler:    _AdapterService_SimulateAlarm_Handler,
		},
		{
			MethodName: "SuppressEvent",
			Handler:    _AdapterService_SuppressEvent_Handler,
		},
		{
			MethodName: "UnSuppressEvent",
			Handler:    _AdapterService_UnSuppressEvent_Handler,
		},
		{
			MethodName: "GetExtValue",
			Handler:    _AdapterService_GetExtValue_Handler,
		},
		{
			MethodName: "SetExtValue",
			Handler:    _AdapterService_SetExtValue_Handler,
		},
		{
			MethodName: "GetSingleValue",
			Handler:    _AdapterService_GetSingleValue_Handler,
		},
		{
			MethodName: "SetSingleValue",
			Handler:    _AdapterService_SetSingleValue_Handler,
		},
		{
			MethodName: "getCustomVlan",
			Handler:    _AdapterService_GetCustomVlan_Handler,
		},
		{
			MethodName: "GetOltConnect",
			Handler:    _AdapterService_GetOltConnect_Handler,
		},
		{
			MethodName: "GetOltDeviceInfo",
			Handler:    _AdapterService_GetOltDeviceInfo_Handler,
		},
		{
			MethodName: "SetPmdTxDis",
			Handler:    _AdapterService_SetPmdTxDis_Handler,
		},
		{
			MethodName: "GetPmdTxdis",
			Handler:    _AdapterService_GetPmdTxdis_Handler,
		},
		{
			MethodName: "GetDevicePmdStatus",
			Handler:    _AdapterService_GetDevicePmdStatus_Handler,
		},
		{
			MethodName: "SetDevicePort",
			Handler:    _AdapterService_SetDevicePort_Handler,
		},
		{
			MethodName: "GetDevicePort",
			Handler:    _AdapterService_GetDevicePort_Handler,
		},
		{
			MethodName: "PortReset",
			Handler:    _AdapterService_PortReset_Handler,
		},
		{
			MethodName: "SetMtuSize",
			Handler:    _AdapterService_SetMtuSize_Handler,
		},
		{
			MethodName: "GetMtuSize",
			Handler:    _AdapterService_GetMtuSize_Handler,
		},
		{
			MethodName: "SetVlan",
			Handler:    _AdapterService_SetVlan_Handler,
		},
		{
			MethodName: "SetLutMode",
			Handler:    _AdapterService_SetLutMode_Handler,
		},
		{
			MethodName: "GetLutMode",
			Handler:    _AdapterService_GetLutMode_Handler,
		},
		{
			MethodName: "SetAgingMode",
			Handler:    _AdapterService_SetAgingMode_Handler,
		},
		{
			MethodName: "GetAgingMode",
			Handler:    _AdapterService_GetAgingMode_Handler,
		},
		{
			MethodName: "SetAgingTime",
			Handler:    _AdapterService_SetAgingTime_Handler,
		},
		{
			MethodName: "GetAgingTime",
			Handler:    _AdapterService_GetAgingTime_Handler,
		},
		{
			MethodName: "GetDeviceMacInfo",
			Handler:    _AdapterService_GetDeviceMacInfo_Handler,
		},
		{
			MethodName: "SetSdnTable",
			Handler:    _AdapterService_SetSdnTable_Handler,
		},
		{
			MethodName: "GetSdnTable",
			Handler:    _AdapterService_GetSdnTable_Handler,
		},
		{
			MethodName: "SetLength",
			Handler:    _AdapterService_SetLength_Handler,
		},
		{
			MethodName: "GetLength",
			Handler:    _AdapterService_GetLength_Handler,
		},
		{
			MethodName: "SetQuietZone",
			Handler:    _AdapterService_SetQuietZone_Handler,
		},
		{
			MethodName: "GetQuietZone",
			Handler:    _AdapterService_GetQuietZone_Handler,
		},
		{
			MethodName: "SetFecMode",
			Handler:    _AdapterService_SetFecMode_Handler,
		},
		{
			MethodName: "GetFecMode",
			Handler:    _AdapterService_GetFecMode_Handler,
		},
		{
			MethodName: "AddOnu",
			Handler:    _AdapterService_AddOnu_Handler,
		},
		{
			MethodName: "DeleteOnu25G",
			Handler:    _AdapterService_DeleteOnu25G_Handler,
		},
		{
			MethodName: "AddOnuSla",
			Handler:    _AdapterService_AddOnuSla_Handler,
		},
		{
			MethodName: "ClearOnuSla",
			Handler:    _AdapterService_ClearOnuSla_Handler,
		},
		{
			MethodName: "GetSlaTable",
			Handler:    _AdapterService_GetSlaTable_Handler,
		},
		{
			MethodName: "SetOnuAllocid",
			Handler:    _AdapterService_SetOnuAllocid_Handler,
		},
		{
			MethodName: "DelOnuAllocid",
			Handler:    _AdapterService_DelOnuAllocid_Handler,
		},
		{
			MethodName: "SetOnuVssn",
			Handler:    _AdapterService_SetOnuVssn_Handler,
		},
		{
			MethodName: "GetOnuVssn",
			Handler:    _AdapterService_GetOnuVssn_Handler,
		},
		{
			MethodName: "GetOnuDistance",
			Handler:    _AdapterService_GetOnuDistance_Handler,
		},
		{
			MethodName: "SetBurstDelimiter",
			Handler:    _AdapterService_SetBurstDelimiter_Handler,
		},
		{
			MethodName: "GetBurstDelimiter",
			Handler:    _AdapterService_GetBurstDelimiter_Handler,
		},
		{
			MethodName: "SetBurstPreamble",
			Handler:    _AdapterService_SetBurstPreamble_Handler,
		},
		{
			MethodName: "GetBurstPreamble",
			Handler:    _AdapterService_GetBurstPreamble_Handler,
		},
		{
			MethodName: "SetBurstVersion",
			Handler:    _AdapterService_SetBurstVersion_Handler,
		},
		{
			MethodName: "GetBurstVersion",
			Handler:    _AdapterService_GetBurstVersion_Handler,
		},
		{
			MethodName: "SetBurstProfile",
			Handler:    _AdapterService_SetBurstProfile_Handler,
		},
		{
			MethodName: "GetBurstProfile",
			Handler:    _AdapterService_GetBurstProfile_Handler,
		},
		{
			MethodName: "GetRegisterStatus",
			Handler:    _AdapterService_GetRegisterStatus_Handler,
		},
		{
			MethodName: "GetOnuInfo",
			Handler:    _AdapterService_GetOnuInfo_Handler,
		},
		{
			MethodName: "GetOmciStatus",
			Handler:    _AdapterService_GetOmciStatus_Handler,
		},
		{
			MethodName: "SetDsOmciOnu",
			Handler:    _AdapterService_SetDsOmciOnu_Handler,
		},
		{
			MethodName: "SetDsOmciData",
			Handler:    _AdapterService_SetDsOmciData_Handler,
		},
		{
			MethodName: "GetUsOmciData",
			Handler:    _AdapterService_GetUsOmciData_Handler,
		},
		{
			MethodName: "SetTod",
			Handler:    _AdapterService_SetTod_Handler,
		},
		{
			MethodName: "GetTod",
			Handler:    _AdapterService_GetTod_Handler,
		},
		{
			MethodName: "SetDataMode",
			Handler:    _AdapterService_SetDataMode_Handler,
		},
		{
			MethodName: "GetDataMode",
			Handler:    _AdapterService_GetDataMode_Handler,
		},
		{
			MethodName: "SetFecDecMode",
			Handler:    _AdapterService_SetFecDecMode_Handler,
		},
		{
			MethodName: "GetFecDecMode",
			Handler:    _AdapterService_GetFecDecMode_Handler,
		},
		{
			MethodName: "SetDelimiter",
			Handler:    _AdapterService_SetDelimiter_Handler,
		},
		{
			MethodName: "GetDelimiter",
			Handler:    _AdapterService_GetDelimiter_Handler,
		},
		{
			MethodName: "SetErrorPermit",
			Handler:    _AdapterService_SetErrorPermit_Handler,
		},
		{
			MethodName: "GetErrorPermit",
			Handler:    _AdapterService_GetErrorPermit_Handler,
		},
		{
			MethodName: "SetPmControl",
			Handler:    _AdapterService_SetPmControl_Handler,
		},
		{
			MethodName: "GetPmControl",
			Handler:    _AdapterService_GetPmControl_Handler,
		},
		{
			MethodName: "GetPmTable",
			Handler:    _AdapterService_GetPmTable_Handler,
		},
		{
			MethodName: "SetSAOn",
			Handler:    _AdapterService_SetSAOn_Handler,
		},
		{
			MethodName: "SetSAOff",
			Handler:    _AdapterService_SetSAOff_Handler,
		},
		{
			MethodName: "Create_device_handler",
			Handler:    _AdapterService_CreateDeviceHandler_Handler,
		},
		{
			MethodName: "SetSliceBw",
			Handler:    _AdapterService_SetSliceBw_Handler,
		},
		{
			MethodName: "GetSliceBw",
			Handler:    _AdapterService_GetSliceBw_Handler,
		},
		{
			MethodName: "SetSlaV2",
			Handler:    _AdapterService_SetSlaV2_Handler,
		},
		{
			MethodName: "GetSlaV2",
			Handler:    _AdapterService_GetSlaV2_Handler,
		},
		{
			MethodName: "SendOmciData",
			Handler:    _AdapterService_SendOmciData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "voltha_protos/adapter_service.proto",
}
