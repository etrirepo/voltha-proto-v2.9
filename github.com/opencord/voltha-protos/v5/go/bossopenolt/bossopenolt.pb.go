// Copyright (c) 2018 Open Networking Foundation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: voltha_protos/bossopenolt.proto

//option java_generic_services=true;

package bossopenolt

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BossRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string       `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Param    *ParamFields `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"` //optional..
}

func (x *BossRequest) Reset() {
	*x = BossRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BossRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BossRequest) ProtoMessage() {}

func (x *BossRequest) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BossRequest.ProtoReflect.Descriptor instead.
func (*BossRequest) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{0}
}

func (x *BossRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *BossRequest) GetParam() *ParamFields {
	if x != nil {
		return x.Param
	}
	return nil
}

type ParamFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*ParamFields_SetpmdtxdisParam
	//	*ParamFields_GetpmdskindParam
	//	*ParamFields_SetportAram
	//	*ParamFields_SetportkindParam
	//	*ParamFields_SetmtusizeParam
	//	*ParamFields_SetvlanParam
	//	*ParamFields_SetdirectiommodeParam
	//	*ParamFields_GetdirectionvalueParam
	//	*ParamFields_IntegervalueParam
	//	*ParamFields_SetsdntableParam
	//	*ParamFields_GetsdntableParam
	//	*ParamFields_SetlengthParam
	//	*ParamFields_GetlengthParam
	//	*ParamFields_OnuctrlParam
	//	*ParamFields_AddonuslaParam
	//	*ParamFields_ClearonuslaParam
	//	*ParamFields_SetonuallocidParam
	//	*ParamFields_SetonuvssnParam
	//	*ParamFields_SetburstdelimitParam
	//	*ParamFields_SetburstpreambleParam
	//	*ParamFields_SetburstversionParam
	//	*ParamFields_SetdsomcidataParam
	//	*ParamFields_SettodParam
	//	*ParamFields_StringvalueParam
	//	*ParamFields_SetpmcontrolParam
	//	*ParamFields_SetslicebwParam
	//	*ParamFields_GetslicebwParam
	//	*ParamFields_Setslav2Param
	//	*ParamFields_SendomcidataParam
	Data isParamFields_Data `protobuf_oneof:"data"`
}

func (x *ParamFields) Reset() {
	*x = ParamFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParamFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParamFields) ProtoMessage() {}

func (x *ParamFields) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParamFields.ProtoReflect.Descriptor instead.
func (*ParamFields) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{1}
}

func (m *ParamFields) GetData() isParamFields_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *ParamFields) GetSetpmdtxdisParam() *SetPmdTxdis {
	if x, ok := x.GetData().(*ParamFields_SetpmdtxdisParam); ok {
		return x.SetpmdtxdisParam
	}
	return nil
}

func (x *ParamFields) GetGetpmdskindParam() *GetPmdsKind {
	if x, ok := x.GetData().(*ParamFields_GetpmdskindParam); ok {
		return x.GetpmdskindParam
	}
	return nil
}

func (x *ParamFields) GetSetportAram() *SetPort {
	if x, ok := x.GetData().(*ParamFields_SetportAram); ok {
		return x.SetportAram
	}
	return nil
}

func (x *ParamFields) GetSetportkindParam() *SetPortKind {
	if x, ok := x.GetData().(*ParamFields_SetportkindParam); ok {
		return x.SetportkindParam
	}
	return nil
}

func (x *ParamFields) GetSetmtusizeParam() *SetMtuSize {
	if x, ok := x.GetData().(*ParamFields_SetmtusizeParam); ok {
		return x.SetmtusizeParam
	}
	return nil
}

func (x *ParamFields) GetSetvlanParam() *SetVlan {
	if x, ok := x.GetData().(*ParamFields_SetvlanParam); ok {
		return x.SetvlanParam
	}
	return nil
}

func (x *ParamFields) GetSetdirectiommodeParam() *SetDirectionMode {
	if x, ok := x.GetData().(*ParamFields_SetdirectiommodeParam); ok {
		return x.SetdirectiommodeParam
	}
	return nil
}

func (x *ParamFields) GetGetdirectionvalueParam() *GetDirectionValue {
	if x, ok := x.GetData().(*ParamFields_GetdirectionvalueParam); ok {
		return x.GetdirectionvalueParam
	}
	return nil
}

func (x *ParamFields) GetIntegervalueParam() *IntegerValue {
	if x, ok := x.GetData().(*ParamFields_IntegervalueParam); ok {
		return x.IntegervalueParam
	}
	return nil
}

func (x *ParamFields) GetSetsdntableParam() *SetSdnTable {
	if x, ok := x.GetData().(*ParamFields_SetsdntableParam); ok {
		return x.SetsdntableParam
	}
	return nil
}

func (x *ParamFields) GetGetsdntableParam() *GetSdnTable {
	if x, ok := x.GetData().(*ParamFields_GetsdntableParam); ok {
		return x.GetsdntableParam
	}
	return nil
}

func (x *ParamFields) GetSetlengthParam() *SetLength {
	if x, ok := x.GetData().(*ParamFields_SetlengthParam); ok {
		return x.SetlengthParam
	}
	return nil
}

func (x *ParamFields) GetGetlengthParam() *GetLength {
	if x, ok := x.GetData().(*ParamFields_GetlengthParam); ok {
		return x.GetlengthParam
	}
	return nil
}

func (x *ParamFields) GetOnuctrlParam() *OnuCtrl {
	if x, ok := x.GetData().(*ParamFields_OnuctrlParam); ok {
		return x.OnuctrlParam
	}
	return nil
}

func (x *ParamFields) GetAddonuslaParam() *AddOnuSla {
	if x, ok := x.GetData().(*ParamFields_AddonuslaParam); ok {
		return x.AddonuslaParam
	}
	return nil
}

func (x *ParamFields) GetClearonuslaParam() *ClearOnuSla {
	if x, ok := x.GetData().(*ParamFields_ClearonuslaParam); ok {
		return x.ClearonuslaParam
	}
	return nil
}

func (x *ParamFields) GetSetonuallocidParam() *SetOnuAllocid {
	if x, ok := x.GetData().(*ParamFields_SetonuallocidParam); ok {
		return x.SetonuallocidParam
	}
	return nil
}

func (x *ParamFields) GetSetonuvssnParam() *SetOnuVssn {
	if x, ok := x.GetData().(*ParamFields_SetonuvssnParam); ok {
		return x.SetonuvssnParam
	}
	return nil
}

func (x *ParamFields) GetSetburstdelimitParam() *SetBurstDelimit {
	if x, ok := x.GetData().(*ParamFields_SetburstdelimitParam); ok {
		return x.SetburstdelimitParam
	}
	return nil
}

func (x *ParamFields) GetSetburstpreambleParam() *SetBurstPreamble {
	if x, ok := x.GetData().(*ParamFields_SetburstpreambleParam); ok {
		return x.SetburstpreambleParam
	}
	return nil
}

func (x *ParamFields) GetSetburstversionParam() *SetBurstVersion {
	if x, ok := x.GetData().(*ParamFields_SetburstversionParam); ok {
		return x.SetburstversionParam
	}
	return nil
}

func (x *ParamFields) GetSetdsomcidataParam() *SetDsOmciData {
	if x, ok := x.GetData().(*ParamFields_SetdsomcidataParam); ok {
		return x.SetdsomcidataParam
	}
	return nil
}

func (x *ParamFields) GetSettodParam() *SetTod {
	if x, ok := x.GetData().(*ParamFields_SettodParam); ok {
		return x.SettodParam
	}
	return nil
}

func (x *ParamFields) GetStringvalueParam() *StringValue {
	if x, ok := x.GetData().(*ParamFields_StringvalueParam); ok {
		return x.StringvalueParam
	}
	return nil
}

func (x *ParamFields) GetSetpmcontrolParam() *SetPmControl {
	if x, ok := x.GetData().(*ParamFields_SetpmcontrolParam); ok {
		return x.SetpmcontrolParam
	}
	return nil
}

func (x *ParamFields) GetSetslicebwParam() *SetSliceBw {
	if x, ok := x.GetData().(*ParamFields_SetslicebwParam); ok {
		return x.SetslicebwParam
	}
	return nil
}

func (x *ParamFields) GetGetslicebwParam() *GetSliceBw {
	if x, ok := x.GetData().(*ParamFields_GetslicebwParam); ok {
		return x.GetslicebwParam
	}
	return nil
}

func (x *ParamFields) GetSetslav2Param() *SetSlaV2 {
	if x, ok := x.GetData().(*ParamFields_Setslav2Param); ok {
		return x.Setslav2Param
	}
	return nil
}

func (x *ParamFields) GetSendomcidataParam() *SendOmciData {
	if x, ok := x.GetData().(*ParamFields_SendomcidataParam); ok {
		return x.SendomcidataParam
	}
	return nil
}

type isParamFields_Data interface {
	isParamFields_Data()
}

type ParamFields_SetpmdtxdisParam struct {
	SetpmdtxdisParam *SetPmdTxdis `protobuf:"bytes,2,opt,name=setpmdtxdis_param,json=setpmdtxdisParam,proto3,oneof"`
}

type ParamFields_GetpmdskindParam struct {
	GetpmdskindParam *GetPmdsKind `protobuf:"bytes,3,opt,name=getpmdskind_param,json=getpmdskindParam,proto3,oneof"`
}

type ParamFields_SetportAram struct {
	SetportAram *SetPort `protobuf:"bytes,4,opt,name=setport_aram,json=setportAram,proto3,oneof"`
}

type ParamFields_SetportkindParam struct {
	SetportkindParam *SetPortKind `protobuf:"bytes,5,opt,name=setportkind_param,json=setportkindParam,proto3,oneof"`
}

type ParamFields_SetmtusizeParam struct {
	SetmtusizeParam *SetMtuSize `protobuf:"bytes,6,opt,name=setmtusize_param,json=setmtusizeParam,proto3,oneof"`
}

type ParamFields_SetvlanParam struct {
	SetvlanParam *SetVlan `protobuf:"bytes,7,opt,name=setvlan_param,json=setvlanParam,proto3,oneof"`
}

type ParamFields_SetdirectiommodeParam struct {
	SetdirectiommodeParam *SetDirectionMode `protobuf:"bytes,8,opt,name=setdirectiommode_param,json=setdirectiommodeParam,proto3,oneof"`
}

type ParamFields_GetdirectionvalueParam struct {
	GetdirectionvalueParam *GetDirectionValue `protobuf:"bytes,9,opt,name=getdirectionvalue_param,json=getdirectionvalueParam,proto3,oneof"`
}

type ParamFields_IntegervalueParam struct {
	IntegervalueParam *IntegerValue `protobuf:"bytes,10,opt,name=integervalue_param,json=integervalueParam,proto3,oneof"`
}

type ParamFields_SetsdntableParam struct {
	SetsdntableParam *SetSdnTable `protobuf:"bytes,11,opt,name=setsdntable_param,json=setsdntableParam,proto3,oneof"`
}

type ParamFields_GetsdntableParam struct {
	GetsdntableParam *GetSdnTable `protobuf:"bytes,12,opt,name=getsdntable_param,json=getsdntableParam,proto3,oneof"`
}

type ParamFields_SetlengthParam struct {
	SetlengthParam *SetLength `protobuf:"bytes,13,opt,name=setlength_param,json=setlengthParam,proto3,oneof"`
}

type ParamFields_GetlengthParam struct {
	GetlengthParam *GetLength `protobuf:"bytes,14,opt,name=getlength_param,json=getlengthParam,proto3,oneof"`
}

type ParamFields_OnuctrlParam struct {
	OnuctrlParam *OnuCtrl `protobuf:"bytes,15,opt,name=onuctrl_param,json=onuctrlParam,proto3,oneof"`
}

type ParamFields_AddonuslaParam struct {
	AddonuslaParam *AddOnuSla `protobuf:"bytes,16,opt,name=addonusla_param,json=addonuslaParam,proto3,oneof"`
}

type ParamFields_ClearonuslaParam struct {
	ClearonuslaParam *ClearOnuSla `protobuf:"bytes,17,opt,name=clearonusla_param,json=clearonuslaParam,proto3,oneof"`
}

type ParamFields_SetonuallocidParam struct {
	SetonuallocidParam *SetOnuAllocid `protobuf:"bytes,18,opt,name=setonuallocid_param,json=setonuallocidParam,proto3,oneof"`
}

type ParamFields_SetonuvssnParam struct {
	SetonuvssnParam *SetOnuVssn `protobuf:"bytes,19,opt,name=setonuvssn_param,json=setonuvssnParam,proto3,oneof"`
}

type ParamFields_SetburstdelimitParam struct {
	SetburstdelimitParam *SetBurstDelimit `protobuf:"bytes,20,opt,name=setburstdelimit_param,json=setburstdelimitParam,proto3,oneof"`
}

type ParamFields_SetburstpreambleParam struct {
	SetburstpreambleParam *SetBurstPreamble `protobuf:"bytes,21,opt,name=setburstpreamble_param,json=setburstpreambleParam,proto3,oneof"`
}

type ParamFields_SetburstversionParam struct {
	SetburstversionParam *SetBurstVersion `protobuf:"bytes,22,opt,name=setburstversion_param,json=setburstversionParam,proto3,oneof"`
}

type ParamFields_SetdsomcidataParam struct {
	SetdsomcidataParam *SetDsOmciData `protobuf:"bytes,23,opt,name=setdsomcidata_param,json=setdsomcidataParam,proto3,oneof"`
}

type ParamFields_SettodParam struct {
	SettodParam *SetTod `protobuf:"bytes,24,opt,name=settod_param,json=settodParam,proto3,oneof"`
}

type ParamFields_StringvalueParam struct {
	StringvalueParam *StringValue `protobuf:"bytes,25,opt,name=stringvalue_param,json=stringvalueParam,proto3,oneof"`
}

type ParamFields_SetpmcontrolParam struct {
	SetpmcontrolParam *SetPmControl `protobuf:"bytes,26,opt,name=setpmcontrol_param,json=setpmcontrolParam,proto3,oneof"`
}

type ParamFields_SetslicebwParam struct {
	SetslicebwParam *SetSliceBw `protobuf:"bytes,27,opt,name=setslicebw_param,json=setslicebwParam,proto3,oneof"`
}

type ParamFields_GetslicebwParam struct {
	GetslicebwParam *GetSliceBw `protobuf:"bytes,28,opt,name=getslicebw_param,json=getslicebwParam,proto3,oneof"`
}

type ParamFields_Setslav2Param struct {
	Setslav2Param *SetSlaV2 `protobuf:"bytes,29,opt,name=setslav2_param,json=setslav2Param,proto3,oneof"`
}

type ParamFields_SendomcidataParam struct {
	SendomcidataParam *SendOmciData `protobuf:"bytes,30,opt,name=sendomcidata_param,json=sendomcidataParam,proto3,oneof"`
}

func (*ParamFields_SetpmdtxdisParam) isParamFields_Data() {}

func (*ParamFields_GetpmdskindParam) isParamFields_Data() {}

func (*ParamFields_SetportAram) isParamFields_Data() {}

func (*ParamFields_SetportkindParam) isParamFields_Data() {}

func (*ParamFields_SetmtusizeParam) isParamFields_Data() {}

func (*ParamFields_SetvlanParam) isParamFields_Data() {}

func (*ParamFields_SetdirectiommodeParam) isParamFields_Data() {}

func (*ParamFields_GetdirectionvalueParam) isParamFields_Data() {}

func (*ParamFields_IntegervalueParam) isParamFields_Data() {}

func (*ParamFields_SetsdntableParam) isParamFields_Data() {}

func (*ParamFields_GetsdntableParam) isParamFields_Data() {}

func (*ParamFields_SetlengthParam) isParamFields_Data() {}

func (*ParamFields_GetlengthParam) isParamFields_Data() {}

func (*ParamFields_OnuctrlParam) isParamFields_Data() {}

func (*ParamFields_AddonuslaParam) isParamFields_Data() {}

func (*ParamFields_ClearonuslaParam) isParamFields_Data() {}

func (*ParamFields_SetonuallocidParam) isParamFields_Data() {}

func (*ParamFields_SetonuvssnParam) isParamFields_Data() {}

func (*ParamFields_SetburstdelimitParam) isParamFields_Data() {}

func (*ParamFields_SetburstpreambleParam) isParamFields_Data() {}

func (*ParamFields_SetburstversionParam) isParamFields_Data() {}

func (*ParamFields_SetdsomcidataParam) isParamFields_Data() {}

func (*ParamFields_SettodParam) isParamFields_Data() {}

func (*ParamFields_StringvalueParam) isParamFields_Data() {}

func (*ParamFields_SetpmcontrolParam) isParamFields_Data() {}

func (*ParamFields_SetslicebwParam) isParamFields_Data() {}

func (*ParamFields_GetslicebwParam) isParamFields_Data() {}

func (*ParamFields_Setslav2Param) isParamFields_Data() {}

func (*ParamFields_SendomcidataParam) isParamFields_Data() {}

type SendOmciData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnuId    int32  `protobuf:"varint,1,opt,name=onu_id,json=onuId,proto3" json:"onu_id,omitempty"`
	OmciData string `protobuf:"bytes,2,opt,name=omci_data,json=omciData,proto3" json:"omci_data,omitempty"`
}

func (x *SendOmciData) Reset() {
	*x = SendOmciData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendOmciData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendOmciData) ProtoMessage() {}

func (x *SendOmciData) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendOmciData.ProtoReflect.Descriptor instead.
func (*SendOmciData) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{2}
}

func (x *SendOmciData) GetOnuId() int32 {
	if x != nil {
		return x.OnuId
	}
	return 0
}

func (x *SendOmciData) GetOmciData() string {
	if x != nil {
		return x.OmciData
	}
	return ""
}

type SetSlaV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnuId int32 `protobuf:"varint,1,opt,name=onu_id,json=onuId,proto3" json:"onu_id,omitempty"`
	Tcont int32 `protobuf:"varint,2,opt,name=tcont,proto3" json:"tcont,omitempty"`
	Slice int32 `protobuf:"varint,3,opt,name=slice,proto3" json:"slice,omitempty"`
	CoDba int32 `protobuf:"varint,4,opt,name=co_dba,json=coDba,proto3" json:"co_dba,omitempty"`
	Type  int32 `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	Rf    int32 `protobuf:"varint,6,opt,name=rf,proto3" json:"rf,omitempty"`
	Ra    int32 `protobuf:"varint,7,opt,name=ra,proto3" json:"ra,omitempty"`
	Rn    int32 `protobuf:"varint,8,opt,name=rn,proto3" json:"rn,omitempty"`
}

func (x *SetSlaV2) Reset() {
	*x = SetSlaV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSlaV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSlaV2) ProtoMessage() {}

func (x *SetSlaV2) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSlaV2.ProtoReflect.Descriptor instead.
func (*SetSlaV2) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{3}
}

func (x *SetSlaV2) GetOnuId() int32 {
	if x != nil {
		return x.OnuId
	}
	return 0
}

func (x *SetSlaV2) GetTcont() int32 {
	if x != nil {
		return x.Tcont
	}
	return 0
}

func (x *SetSlaV2) GetSlice() int32 {
	if x != nil {
		return x.Slice
	}
	return 0
}

func (x *SetSlaV2) GetCoDba() int32 {
	if x != nil {
		return x.CoDba
	}
	return 0
}

func (x *SetSlaV2) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SetSlaV2) GetRf() int32 {
	if x != nil {
		return x.Rf
	}
	return 0
}

func (x *SetSlaV2) GetRa() int32 {
	if x != nil {
		return x.Ra
	}
	return 0
}

func (x *SetSlaV2) GetRn() int32 {
	if x != nil {
		return x.Rn
	}
	return 0
}

type SetSliceBw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slice int32 `protobuf:"varint,1,opt,name=slice,proto3" json:"slice,omitempty"`
	Bw    int32 `protobuf:"varint,2,opt,name=bw,proto3" json:"bw,omitempty"`
}

func (x *SetSliceBw) Reset() {
	*x = SetSliceBw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSliceBw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSliceBw) ProtoMessage() {}

func (x *SetSliceBw) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSliceBw.ProtoReflect.Descriptor instead.
func (*SetSliceBw) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{4}
}

func (x *SetSliceBw) GetSlice() int32 {
	if x != nil {
		return x.Slice
	}
	return 0
}

func (x *SetSliceBw) GetBw() int32 {
	if x != nil {
		return x.Bw
	}
	return 0
}

type GetSliceBw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slice int32 `protobuf:"varint,1,opt,name=slice,proto3" json:"slice,omitempty"`
}

func (x *GetSliceBw) Reset() {
	*x = GetSliceBw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSliceBw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSliceBw) ProtoMessage() {}

func (x *GetSliceBw) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSliceBw.ProtoReflect.Descriptor instead.
func (*GetSliceBw) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{5}
}

func (x *GetSliceBw) GetSlice() int32 {
	if x != nil {
		return x.Slice
	}
	return 0
}

type SetPmControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnuId     int32 `protobuf:"varint,1,opt,name=onu_id,json=onuId,proto3" json:"onu_id,omitempty"`
	Mode      int32 `protobuf:"varint,2,opt,name=mode,proto3" json:"mode,omitempty"`
	PowerTime int32 `protobuf:"varint,3,opt,name=power_time,json=powerTime,proto3" json:"power_time,omitempty"`
	AwareTime int32 `protobuf:"varint,4,opt,name=aware_time,json=awareTime,proto3" json:"aware_time,omitempty"`
}

func (x *SetPmControl) Reset() {
	*x = SetPmControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPmControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPmControl) ProtoMessage() {}

func (x *SetPmControl) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPmControl.ProtoReflect.Descriptor instead.
func (*SetPmControl) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{6}
}

func (x *SetPmControl) GetOnuId() int32 {
	if x != nil {
		return x.OnuId
	}
	return 0
}

func (x *SetPmControl) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *SetPmControl) GetPowerTime() int32 {
	if x != nil {
		return x.PowerTime
	}
	return 0
}

func (x *SetPmControl) GetAwareTime() int32 {
	if x != nil {
		return x.AwareTime
	}
	return 0
}

type SetTod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode int32 `protobuf:"varint,1,opt,name=mode,proto3" json:"mode,omitempty"`
	Time int32 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SetTod) Reset() {
	*x = SetTod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTod) ProtoMessage() {}

func (x *SetTod) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTod.ProtoReflect.Descriptor instead.
func (*SetTod) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{7}
}

func (x *SetTod) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *SetTod) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

type SetDsOmciData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Control int32  `protobuf:"varint,1,opt,name=control,proto3" json:"control,omitempty"`
	Data    string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SetDsOmciData) Reset() {
	*x = SetDsOmciData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDsOmciData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDsOmciData) ProtoMessage() {}

func (x *SetDsOmciData) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDsOmciData.ProtoReflect.Descriptor instead.
func (*SetDsOmciData) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{8}
}

func (x *SetDsOmciData) GetControl() int32 {
	if x != nil {
		return x.Control
	}
	return 0
}

func (x *SetDsOmciData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type SetBurstVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Index   int32  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Pontag  int64  `protobuf:"varint,3,opt,name=pontag,proto3" json:"pontag,omitempty"`
}

func (x *SetBurstVersion) Reset() {
	*x = SetBurstVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBurstVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBurstVersion) ProtoMessage() {}

func (x *SetBurstVersion) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBurstVersion.ProtoReflect.Descriptor instead.
func (*SetBurstVersion) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{9}
}

func (x *SetBurstVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SetBurstVersion) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SetBurstVersion) GetPontag() int64 {
	if x != nil {
		return x.Pontag
	}
	return 0
}

type SetBurstPreamble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repeat int32 `protobuf:"varint,1,opt,name=repeat,proto3" json:"repeat,omitempty"`
}

func (x *SetBurstPreamble) Reset() {
	*x = SetBurstPreamble{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBurstPreamble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBurstPreamble) ProtoMessage() {}

func (x *SetBurstPreamble) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBurstPreamble.ProtoReflect.Descriptor instead.
func (*SetBurstPreamble) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{10}
}

func (x *SetBurstPreamble) GetRepeat() int32 {
	if x != nil {
		return x.Repeat
	}
	return 0
}

type SetBurstDelimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length    int32  `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	Delimiter string `protobuf:"bytes,2,opt,name=delimiter,proto3" json:"delimiter,omitempty"`
}

func (x *SetBurstDelimit) Reset() {
	*x = SetBurstDelimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBurstDelimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBurstDelimit) ProtoMessage() {}

func (x *SetBurstDelimit) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBurstDelimit.ProtoReflect.Descriptor instead.
func (*SetBurstDelimit) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{11}
}

func (x *SetBurstDelimit) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *SetBurstDelimit) GetDelimiter() string {
	if x != nil {
		return x.Delimiter
	}
	return ""
}

type SetOnuVssn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnuId int32 `protobuf:"varint,1,opt,name=onu_id,json=onuId,proto3" json:"onu_id,omitempty"`
	Vssn  int32 `protobuf:"varint,2,opt,name=vssn,proto3" json:"vssn,omitempty"`
}

func (x *SetOnuVssn) Reset() {
	*x = SetOnuVssn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOnuVssn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOnuVssn) ProtoMessage() {}

func (x *SetOnuVssn) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOnuVssn.ProtoReflect.Descriptor instead.
func (*SetOnuVssn) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{12}
}

func (x *SetOnuVssn) GetOnuId() int32 {
	if x != nil {
		return x.OnuId
	}
	return 0
}

func (x *SetOnuVssn) GetVssn() int32 {
	if x != nil {
		return x.Vssn
	}
	return 0
}

type SetOnuAllocid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnuId   int32 `protobuf:"varint,1,opt,name=onu_id,json=onuId,proto3" json:"onu_id,omitempty"`
	AllocId int32 `protobuf:"varint,2,opt,name=alloc_id,json=allocId,proto3" json:"alloc_id,omitempty"`
}

func (x *SetOnuAllocid) Reset() {
	*x = SetOnuAllocid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOnuAllocid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOnuAllocid) ProtoMessage() {}

func (x *SetOnuAllocid) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOnuAllocid.ProtoReflect.Descriptor instead.
func (*SetOnuAllocid) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{13}
}

func (x *SetOnuAllocid) GetOnuId() int32 {
	if x != nil {
		return x.OnuId
	}
	return 0
}

func (x *SetOnuAllocid) GetAllocId() int32 {
	if x != nil {
		return x.AllocId
	}
	return 0
}

type ClearOnuSla struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnuId int32 `protobuf:"varint,1,opt,name=onu_id,json=onuId,proto3" json:"onu_id,omitempty"`
	Tcont int32 `protobuf:"varint,2,opt,name=tcont,proto3" json:"tcont,omitempty"`
}

func (x *ClearOnuSla) Reset() {
	*x = ClearOnuSla{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearOnuSla) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearOnuSla) ProtoMessage() {}

func (x *ClearOnuSla) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearOnuSla.ProtoReflect.Descriptor instead.
func (*ClearOnuSla) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{14}
}

func (x *ClearOnuSla) GetOnuId() int32 {
	if x != nil {
		return x.OnuId
	}
	return 0
}

func (x *ClearOnuSla) GetTcont() int32 {
	if x != nil {
		return x.Tcont
	}
	return 0
}

type AddOnuSla struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnuId int32 `protobuf:"varint,1,opt,name=onu_id,json=onuId,proto3" json:"onu_id,omitempty"`
	Tcont int32 `protobuf:"varint,2,opt,name=tcont,proto3" json:"tcont,omitempty"`
	Type  int32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Si    int32 `protobuf:"varint,4,opt,name=si,proto3" json:"si,omitempty"`
	Abmin int32 `protobuf:"varint,5,opt,name=abmin,proto3" json:"abmin,omitempty"`
	Absur int32 `protobuf:"varint,6,opt,name=absur,proto3" json:"absur,omitempty"`
}

func (x *AddOnuSla) Reset() {
	*x = AddOnuSla{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnuSla) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnuSla) ProtoMessage() {}

func (x *AddOnuSla) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnuSla.ProtoReflect.Descriptor instead.
func (*AddOnuSla) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{15}
}

func (x *AddOnuSla) GetOnuId() int32 {
	if x != nil {
		return x.OnuId
	}
	return 0
}

func (x *AddOnuSla) GetTcont() int32 {
	if x != nil {
		return x.Tcont
	}
	return 0
}

func (x *AddOnuSla) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AddOnuSla) GetSi() int32 {
	if x != nil {
		return x.Si
	}
	return 0
}

func (x *AddOnuSla) GetAbmin() int32 {
	if x != nil {
		return x.Abmin
	}
	return 0
}

func (x *AddOnuSla) GetAbsur() int32 {
	if x != nil {
		return x.Absur
	}
	return 0
}

type SetPmdTxdis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortType int32 `protobuf:"varint,1,opt,name=port_type,json=portType,proto3" json:"port_type,omitempty"`
	Mode     int32 `protobuf:"varint,2,opt,name=mode,proto3" json:"mode,omitempty"`
	PortNo   int32 `protobuf:"varint,3,opt,name=port_no,json=portNo,proto3" json:"port_no,omitempty"`
}

func (x *SetPmdTxdis) Reset() {
	*x = SetPmdTxdis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPmdTxdis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPmdTxdis) ProtoMessage() {}

func (x *SetPmdTxdis) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPmdTxdis.ProtoReflect.Descriptor instead.
func (*SetPmdTxdis) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{16}
}

func (x *SetPmdTxdis) GetPortType() int32 {
	if x != nil {
		return x.PortType
	}
	return 0
}

func (x *SetPmdTxdis) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *SetPmdTxdis) GetPortNo() int32 {
	if x != nil {
		return x.PortNo
	}
	return 0
}

type GetPmdsKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortType int32 `protobuf:"varint,1,opt,name=port_type,json=portType,proto3" json:"port_type,omitempty"`
	PortNo   int32 `protobuf:"varint,2,opt,name=port_no,json=portNo,proto3" json:"port_no,omitempty"`
}

func (x *GetPmdsKind) Reset() {
	*x = GetPmdsKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPmdsKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPmdsKind) ProtoMessage() {}

func (x *GetPmdsKind) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPmdsKind.ProtoReflect.Descriptor instead.
func (*GetPmdsKind) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{17}
}

func (x *GetPmdsKind) GetPortType() int32 {
	if x != nil {
		return x.PortType
	}
	return 0
}

func (x *GetPmdsKind) GetPortNo() int32 {
	if x != nil {
		return x.PortNo
	}
	return 0
}

type SetPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode   int32 `protobuf:"varint,1,opt,name=mode,proto3" json:"mode,omitempty"`
	PortNo int32 `protobuf:"varint,2,opt,name=port_no,json=portNo,proto3" json:"port_no,omitempty"`
}

func (x *SetPort) Reset() {
	*x = SetPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPort) ProtoMessage() {}

func (x *SetPort) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPort.ProtoReflect.Descriptor instead.
func (*SetPort) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{18}
}

func (x *SetPort) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *SetPort) GetPortNo() int32 {
	if x != nil {
		return x.PortNo
	}
	return 0
}

type SetPortKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortNo int32 `protobuf:"varint,1,opt,name=port_no,json=portNo,proto3" json:"port_no,omitempty"`
}

func (x *SetPortKind) Reset() {
	*x = SetPortKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPortKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPortKind) ProtoMessage() {}

func (x *SetPortKind) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPortKind.ProtoReflect.Descriptor instead.
func (*SetPortKind) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{19}
}

func (x *SetPortKind) GetPortNo() int32 {
	if x != nil {
		return x.PortNo
	}
	return 0
}

type SetMtuSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MtuSize int32 `protobuf:"varint,2,opt,name=mtu_size,json=mtuSize,proto3" json:"mtu_size,omitempty"`
}

func (x *SetMtuSize) Reset() {
	*x = SetMtuSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMtuSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMtuSize) ProtoMessage() {}

func (x *SetMtuSize) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMtuSize.ProtoReflect.Descriptor instead.
func (*SetMtuSize) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{20}
}

func (x *SetMtuSize) GetMtuSize() int32 {
	if x != nil {
		return x.MtuSize
	}
	return 0
}

type SetVlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action int32 `protobuf:"varint,2,opt,name=action,proto3" json:"action,omitempty"`
	Vid    int32 `protobuf:"varint,3,opt,name=vid,proto3" json:"vid,omitempty"`
	Pbit   int32 `protobuf:"varint,4,opt,name=pbit,proto3" json:"pbit,omitempty"`
}

func (x *SetVlan) Reset() {
	*x = SetVlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVlan) ProtoMessage() {}

func (x *SetVlan) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVlan.ProtoReflect.Descriptor instead.
func (*SetVlan) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{21}
}

func (x *SetVlan) GetAction() int32 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *SetVlan) GetVid() int32 {
	if x != nil {
		return x.Vid
	}
	return 0
}

func (x *SetVlan) GetPbit() int32 {
	if x != nil {
		return x.Pbit
	}
	return 0
}

type SetSdnTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortId int32 `protobuf:"varint,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	Vid    int32 `protobuf:"varint,2,opt,name=vid,proto3" json:"vid,omitempty"`
	Pbit   int32 `protobuf:"varint,3,opt,name=pbit,proto3" json:"pbit,omitempty"`
}

func (x *SetSdnTable) Reset() {
	*x = SetSdnTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSdnTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSdnTable) ProtoMessage() {}

func (x *SetSdnTable) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSdnTable.ProtoReflect.Descriptor instead.
func (*SetSdnTable) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{22}
}

func (x *SetSdnTable) GetPortId() int32 {
	if x != nil {
		return x.PortId
	}
	return 0
}

func (x *SetSdnTable) GetVid() int32 {
	if x != nil {
		return x.Vid
	}
	return 0
}

func (x *SetSdnTable) GetPbit() int32 {
	if x != nil {
		return x.Pbit
	}
	return 0
}

type SetDirectionMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction int32 `protobuf:"varint,1,opt,name=direction,proto3" json:"direction,omitempty"`
	Mode      int32 `protobuf:"varint,2,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *SetDirectionMode) Reset() {
	*x = SetDirectionMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDirectionMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDirectionMode) ProtoMessage() {}

func (x *SetDirectionMode) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDirectionMode.ProtoReflect.Descriptor instead.
func (*SetDirectionMode) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{23}
}

func (x *SetDirectionMode) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *SetDirectionMode) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

type GetDirectionValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction int32 `protobuf:"varint,1,opt,name=direction,proto3" json:"direction,omitempty"`
}

func (x *GetDirectionValue) Reset() {
	*x = GetDirectionValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDirectionValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDirectionValue) ProtoMessage() {}

func (x *GetDirectionValue) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDirectionValue.ProtoReflect.Descriptor instead.
func (*GetDirectionValue) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{24}
}

func (x *GetDirectionValue) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

type GetSdnTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address int32 `protobuf:"varint,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *GetSdnTable) Reset() {
	*x = GetSdnTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSdnTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSdnTable) ProtoMessage() {}

func (x *GetSdnTable) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSdnTable.ProtoReflect.Descriptor instead.
func (*GetSdnTable) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{25}
}

func (x *GetSdnTable) GetAddress() int32 {
	if x != nil {
		return x.Address
	}
	return 0
}

type IntegerValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IntegerValue) Reset() {
	*x = IntegerValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegerValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegerValue) ProtoMessage() {}

func (x *IntegerValue) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegerValue.ProtoReflect.Descriptor instead.
func (*IntegerValue) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{26}
}

func (x *IntegerValue) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type StringValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StringValue) Reset() {
	*x = StringValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringValue) ProtoMessage() {}

func (x *StringValue) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringValue.ProtoReflect.Descriptor instead.
func (*StringValue) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{27}
}

func (x *StringValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SetLength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation int32 `protobuf:"varint,1,opt,name=operation,proto3" json:"operation,omitempty"`
	Value     int32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SetLength) Reset() {
	*x = SetLength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLength) ProtoMessage() {}

func (x *SetLength) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLength.ProtoReflect.Descriptor instead.
func (*SetLength) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{28}
}

func (x *SetLength) GetOperation() int32 {
	if x != nil {
		return x.Operation
	}
	return 0
}

func (x *SetLength) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type GetLength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation int32 `protobuf:"varint,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *GetLength) Reset() {
	*x = GetLength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLength) ProtoMessage() {}

func (x *GetLength) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLength.ProtoReflect.Descriptor instead.
func (*GetLength) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{29}
}

func (x *GetLength) GetOperation() int32 {
	if x != nil {
		return x.Operation
	}
	return 0
}

type OnuCtrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnuId int32 `protobuf:"varint,1,opt,name=onu_id,json=onuId,proto3" json:"onu_id,omitempty"`
}

func (x *OnuCtrl) Reset() {
	*x = OnuCtrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnuCtrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnuCtrl) ProtoMessage() {}

func (x *OnuCtrl) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnuCtrl.ProtoReflect.Descriptor instead.
func (*OnuCtrl) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{30}
}

func (x *OnuCtrl) GetOnuId() int32 {
	if x != nil {
		return x.OnuId
	}
	return 0
}

type OltConnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Ip       string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Mac      string `protobuf:"bytes,3,opt,name=mac,proto3" json:"mac,omitempty"`
}

func (x *OltConnResponse) Reset() {
	*x = OltConnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OltConnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OltConnResponse) ProtoMessage() {}

func (x *OltConnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OltConnResponse.ProtoReflect.Descriptor instead.
func (*OltConnResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{31}
}

func (x *OltConnResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *OltConnResponse) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *OltConnResponse) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

type OltDevResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId  string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	FpgaType  string `protobuf:"bytes,2,opt,name=fpga_type,json=fpgaType,proto3" json:"fpga_type,omitempty"`
	FpgaVer   string `protobuf:"bytes,3,opt,name=fpga_ver,json=fpgaVer,proto3" json:"fpga_ver,omitempty"`
	Fpga_Date string `protobuf:"bytes,4,opt,name=fpga_Date,json=fpgaDate,proto3" json:"fpga_Date,omitempty"`
	SwVer     string `protobuf:"bytes,5,opt,name=sw_ver,json=swVer,proto3" json:"sw_ver,omitempty"`
	SwDate    string `protobuf:"bytes,6,opt,name=sw_date,json=swDate,proto3" json:"sw_date,omitempty"`
}

func (x *OltDevResponse) Reset() {
	*x = OltDevResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OltDevResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OltDevResponse) ProtoMessage() {}

func (x *OltDevResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OltDevResponse.ProtoReflect.Descriptor instead.
func (*OltDevResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{32}
}

func (x *OltDevResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *OltDevResponse) GetFpgaType() string {
	if x != nil {
		return x.FpgaType
	}
	return ""
}

func (x *OltDevResponse) GetFpgaVer() string {
	if x != nil {
		return x.FpgaVer
	}
	return ""
}

func (x *OltDevResponse) GetFpga_Date() string {
	if x != nil {
		return x.Fpga_Date
	}
	return ""
}

func (x *OltDevResponse) GetSwVer() string {
	if x != nil {
		return x.SwVer
	}
	return ""
}

func (x *OltDevResponse) GetSwDate() string {
	if x != nil {
		return x.SwDate
	}
	return ""
}

type ExecResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"` //success=0, fail=1;
}

func (x *ExecResult) Reset() {
	*x = ExecResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecResult) ProtoMessage() {}

func (x *ExecResult) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecResult.ProtoReflect.Descriptor instead.
func (*ExecResult) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{33}
}

func (x *ExecResult) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

type PmdTxdisResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortNo int32  `protobuf:"varint,1,opt,name=port_no,json=portNo,proto3" json:"port_no,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PmdTxdisResponse) Reset() {
	*x = PmdTxdisResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PmdTxdisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PmdTxdisResponse) ProtoMessage() {}

func (x *PmdTxdisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PmdTxdisResponse.ProtoReflect.Descriptor instead.
func (*PmdTxdisResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{34}
}

func (x *PmdTxdisResponse) GetPortNo() int32 {
	if x != nil {
		return x.PortNo
	}
	return 0
}

func (x *PmdTxdisResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type PmdStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortNo int32  `protobuf:"varint,1,opt,name=port_no,json=portNo,proto3" json:"port_no,omitempty"`
	Loss   string `protobuf:"bytes,2,opt,name=loss,proto3" json:"loss,omitempty"`
	Module string `protobuf:"bytes,3,opt,name=module,proto3" json:"module,omitempty"`
	Fault  string `protobuf:"bytes,4,opt,name=fault,proto3" json:"fault,omitempty"`
	Link   string `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *PmdStatusResponse) Reset() {
	*x = PmdStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PmdStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PmdStatusResponse) ProtoMessage() {}

func (x *PmdStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PmdStatusResponse.ProtoReflect.Descriptor instead.
func (*PmdStatusResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{35}
}

func (x *PmdStatusResponse) GetPortNo() int32 {
	if x != nil {
		return x.PortNo
	}
	return 0
}

func (x *PmdStatusResponse) GetLoss() string {
	if x != nil {
		return x.Loss
	}
	return ""
}

func (x *PmdStatusResponse) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *PmdStatusResponse) GetFault() string {
	if x != nil {
		return x.Fault
	}
	return ""
}

func (x *PmdStatusResponse) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type GetPortResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortNo int32  `protobuf:"varint,1,opt,name=port_no,json=portNo,proto3" json:"port_no,omitempty"`
	State  string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *GetPortResponse) Reset() {
	*x = GetPortResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPortResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPortResponse) ProtoMessage() {}

func (x *GetPortResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPortResponse.ProtoReflect.Descriptor instead.
func (*GetPortResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{36}
}

func (x *GetPortResponse) GetPortNo() int32 {
	if x != nil {
		return x.PortNo
	}
	return 0
}

func (x *GetPortResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type MtuSizeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mtu int32 `protobuf:"varint,1,opt,name=mtu,proto3" json:"mtu,omitempty"`
}

func (x *MtuSizeResponse) Reset() {
	*x = MtuSizeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MtuSizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MtuSizeResponse) ProtoMessage() {}

func (x *MtuSizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MtuSizeResponse.ProtoReflect.Descriptor instead.
func (*MtuSizeResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{37}
}

func (x *MtuSizeResponse) GetMtu() int32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

type GetVlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	VlanMode int32  `protobuf:"varint,2,opt,name=vlan_mode,json=vlanMode,proto3" json:"vlan_mode,omitempty"`
	Fields   string `protobuf:"bytes,3,opt,name=fields,proto3" json:"fields,omitempty"`
}

func (x *GetVlanResponse) Reset() {
	*x = GetVlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVlanResponse) ProtoMessage() {}

func (x *GetVlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVlanResponse.ProtoReflect.Descriptor instead.
func (*GetVlanResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{38}
}

func (x *GetVlanResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *GetVlanResponse) GetVlanMode() int32 {
	if x != nil {
		return x.VlanMode
	}
	return 0
}

func (x *GetVlanResponse) GetFields() string {
	if x != nil {
		return x.Fields
	}
	return ""
}

type ModeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Mode     int32  `protobuf:"varint,2,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *ModeResponse) Reset() {
	*x = ModeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModeResponse) ProtoMessage() {}

func (x *ModeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModeResponse.ProtoReflect.Descriptor instead.
func (*ModeResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{39}
}

func (x *ModeResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *ModeResponse) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

type AgingTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId  string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	AgingTime int32  `protobuf:"varint,2,opt,name=aging_time,json=agingTime,proto3" json:"aging_time,omitempty"`
}

func (x *AgingTimeResponse) Reset() {
	*x = AgingTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgingTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgingTimeResponse) ProtoMessage() {}

func (x *AgingTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgingTimeResponse.ProtoReflect.Descriptor instead.
func (*AgingTimeResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{40}
}

func (x *AgingTimeResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *AgingTimeResponse) GetAgingTime() int32 {
	if x != nil {
		return x.AgingTime
	}
	return 0
}

type DevMacInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId  string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Mtu       int32  `protobuf:"varint,2,opt,name=mtu,proto3" json:"mtu,omitempty"`
	VlanMode  int32  `protobuf:"varint,3,opt,name=vlan_mode,json=vlanMode,proto3" json:"vlan_mode,omitempty"`
	AgingMode int32  `protobuf:"varint,4,opt,name=aging_mode,json=agingMode,proto3" json:"aging_mode,omitempty"`
	AgingTime int32  `protobuf:"varint,5,opt,name=aging_time,json=agingTime,proto3" json:"aging_time,omitempty"`
}

func (x *DevMacInfoResponse) Reset() {
	*x = DevMacInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevMacInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevMacInfoResponse) ProtoMessage() {}

func (x *DevMacInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevMacInfoResponse.ProtoReflect.Descriptor instead.
func (*DevMacInfoResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{41}
}

func (x *DevMacInfoResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DevMacInfoResponse) GetMtu() int32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *DevMacInfoResponse) GetVlanMode() int32 {
	if x != nil {
		return x.VlanMode
	}
	return 0
}

func (x *DevMacInfoResponse) GetAgingMode() int32 {
	if x != nil {
		return x.AgingMode
	}
	return 0
}

func (x *DevMacInfoResponse) GetAgingTime() int32 {
	if x != nil {
		return x.AgingTime
	}
	return 0
}

type SdnTableKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HashKey int32 `protobuf:"varint,1,opt,name=hash_key,json=hashKey,proto3" json:"hash_key,omitempty"`
}

func (x *SdnTableKeyResponse) Reset() {
	*x = SdnTableKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdnTableKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdnTableKeyResponse) ProtoMessage() {}

func (x *SdnTableKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdnTableKeyResponse.ProtoReflect.Descriptor instead.
func (*SdnTableKeyResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{42}
}

func (x *SdnTableKeyResponse) GetHashKey() int32 {
	if x != nil {
		return x.HashKey
	}
	return 0
}

type SdnTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Address  int32  `protobuf:"varint,2,opt,name=address,proto3" json:"address,omitempty"`
	PortId   int32  `protobuf:"varint,3,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	Vlan     string `protobuf:"bytes,4,opt,name=vlan,proto3" json:"vlan,omitempty"`
}

func (x *SdnTableResponse) Reset() {
	*x = SdnTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdnTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdnTableResponse) ProtoMessage() {}

func (x *SdnTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdnTableResponse.ProtoReflect.Descriptor instead.
func (*SdnTableResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{43}
}

func (x *SdnTableResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *SdnTableResponse) GetAddress() int32 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *SdnTableResponse) GetPortId() int32 {
	if x != nil {
		return x.PortId
	}
	return 0
}

func (x *SdnTableResponse) GetVlan() string {
	if x != nil {
		return x.Vlan
	}
	return ""
}

type LengthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string  `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Value    float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *LengthResponse) Reset() {
	*x = LengthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LengthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LengthResponse) ProtoMessage() {}

func (x *LengthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LengthResponse.ProtoReflect.Descriptor instead.
func (*LengthResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{44}
}

func (x *LengthResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *LengthResponse) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type QuietZoneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Value    int32  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *QuietZoneResponse) Reset() {
	*x = QuietZoneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuietZoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuietZoneResponse) ProtoMessage() {}

func (x *QuietZoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuietZoneResponse.ProtoReflect.Descriptor instead.
func (*QuietZoneResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{45}
}

func (x *QuietZoneResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *QuietZoneResponse) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type AddOnuResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	OnuId    int32  `protobuf:"varint,2,opt,name=onu_id,json=onuId,proto3" json:"onu_id,omitempty"`
	Result   string `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	Rate     string `protobuf:"bytes,4,opt,name=rate,proto3" json:"rate,omitempty"`
	VendorId string `protobuf:"bytes,5,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	Vssn     string `protobuf:"bytes,6,opt,name=vssn,proto3" json:"vssn,omitempty"`
}

func (x *AddOnuResponse) Reset() {
	*x = AddOnuResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnuResponse) ProtoMessage() {}

func (x *AddOnuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnuResponse.ProtoReflect.Descriptor instead.
func (*AddOnuResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{46}
}

func (x *AddOnuResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *AddOnuResponse) GetOnuId() int32 {
	if x != nil {
		return x.OnuId
	}
	return 0
}

func (x *AddOnuResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *AddOnuResponse) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

func (x *AddOnuResponse) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *AddOnuResponse) GetVssn() string {
	if x != nil {
		return x.Vssn
	}
	return ""
}

type RepeatedSlaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resp []*SlaResponse `protobuf:"bytes,1,rep,name=resp,proto3" json:"resp,omitempty"`
}

func (x *RepeatedSlaResponse) Reset() {
	*x = RepeatedSlaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedSlaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedSlaResponse) ProtoMessage() {}

func (x *RepeatedSlaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedSlaResponse.ProtoReflect.Descriptor instead.
func (*RepeatedSlaResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{47}
}

func (x *RepeatedSlaResponse) GetResp() []*SlaResponse {
	if x != nil {
		return x.Resp
	}
	return nil
}

type SlaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	OnuId    int32  `protobuf:"varint,2,opt,name=onu_id,json=onuId,proto3" json:"onu_id,omitempty"`
	Tcont    int32  `protobuf:"varint,3,opt,name=tcont,proto3" json:"tcont,omitempty"`
	Type     string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Si       int32  `protobuf:"varint,5,opt,name=si,proto3" json:"si,omitempty"`
	Abmin    int32  `protobuf:"varint,6,opt,name=abmin,proto3" json:"abmin,omitempty"`
	Absur    int32  `protobuf:"varint,7,opt,name=absur,proto3" json:"absur,omitempty"`
	Fec      string `protobuf:"bytes,8,opt,name=fec,proto3" json:"fec,omitempty"`
	Distance int32  `protobuf:"varint,9,opt,name=distance,proto3" json:"distance,omitempty"`
}

func (x *SlaResponse) Reset() {
	*x = SlaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlaResponse) ProtoMessage() {}

func (x *SlaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlaResponse.ProtoReflect.Descriptor instead.
func (*SlaResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{48}
}

func (x *SlaResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *SlaResponse) GetOnuId() int32 {
	if x != nil {
		return x.OnuId
	}
	return 0
}

func (x *SlaResponse) GetTcont() int32 {
	if x != nil {
		return x.Tcont
	}
	return 0
}

func (x *SlaResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SlaResponse) GetSi() int32 {
	if x != nil {
		return x.Si
	}
	return 0
}

func (x *SlaResponse) GetAbmin() int32 {
	if x != nil {
		return x.Abmin
	}
	return 0
}

func (x *SlaResponse) GetAbsur() int32 {
	if x != nil {
		return x.Absur
	}
	return 0
}

func (x *SlaResponse) GetFec() string {
	if x != nil {
		return x.Fec
	}
	return ""
}

func (x *SlaResponse) GetDistance() int32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

type OnuVssnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	OnuId    int32  `protobuf:"varint,2,opt,name=onu_id,json=onuId,proto3" json:"onu_id,omitempty"`
	Vssn     int32  `protobuf:"varint,3,opt,name=vssn,proto3" json:"vssn,omitempty"`
}

func (x *OnuVssnResponse) Reset() {
	*x = OnuVssnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnuVssnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnuVssnResponse) ProtoMessage() {}

func (x *OnuVssnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnuVssnResponse.ProtoReflect.Descriptor instead.
func (*OnuVssnResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{49}
}

func (x *OnuVssnResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *OnuVssnResponse) GetOnuId() int32 {
	if x != nil {
		return x.OnuId
	}
	return 0
}

func (x *OnuVssnResponse) GetVssn() int32 {
	if x != nil {
		return x.Vssn
	}
	return 0
}

type OnuDistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	OnuId    int32  `protobuf:"varint,2,opt,name=onu_id,json=onuId,proto3" json:"onu_id,omitempty"`
	Distance int32  `protobuf:"varint,3,opt,name=distance,proto3" json:"distance,omitempty"`
}

func (x *OnuDistResponse) Reset() {
	*x = OnuDistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnuDistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnuDistResponse) ProtoMessage() {}

func (x *OnuDistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnuDistResponse.ProtoReflect.Descriptor instead.
func (*OnuDistResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{50}
}

func (x *OnuDistResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *OnuDistResponse) GetOnuId() int32 {
	if x != nil {
		return x.OnuId
	}
	return 0
}

func (x *OnuDistResponse) GetDistance() int32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

type BurstDelimitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId  string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Length    int32  `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	Delimiter string `protobuf:"bytes,3,opt,name=delimiter,proto3" json:"delimiter,omitempty"`
}

func (x *BurstDelimitResponse) Reset() {
	*x = BurstDelimitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BurstDelimitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BurstDelimitResponse) ProtoMessage() {}

func (x *BurstDelimitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BurstDelimitResponse.ProtoReflect.Descriptor instead.
func (*BurstDelimitResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{51}
}

func (x *BurstDelimitResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *BurstDelimitResponse) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *BurstDelimitResponse) GetDelimiter() string {
	if x != nil {
		return x.Delimiter
	}
	return ""
}

type BurstPreambleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Length   int32  `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	Preamble string `protobuf:"bytes,3,opt,name=preamble,proto3" json:"preamble,omitempty"`
	Repeat   int32  `protobuf:"varint,4,opt,name=repeat,proto3" json:"repeat,omitempty"`
}

func (x *BurstPreambleResponse) Reset() {
	*x = BurstPreambleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BurstPreambleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BurstPreambleResponse) ProtoMessage() {}

func (x *BurstPreambleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BurstPreambleResponse.ProtoReflect.Descriptor instead.
func (*BurstPreambleResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{52}
}

func (x *BurstPreambleResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *BurstPreambleResponse) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *BurstPreambleResponse) GetPreamble() string {
	if x != nil {
		return x.Preamble
	}
	return ""
}

func (x *BurstPreambleResponse) GetRepeat() int32 {
	if x != nil {
		return x.Repeat
	}
	return 0
}

type BurstVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Version  string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Index    int32  `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Pontag   int64  `protobuf:"varint,4,opt,name=pontag,proto3" json:"pontag,omitempty"`
}

func (x *BurstVersionResponse) Reset() {
	*x = BurstVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BurstVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BurstVersionResponse) ProtoMessage() {}

func (x *BurstVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BurstVersionResponse.ProtoReflect.Descriptor instead.
func (*BurstVersionResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{53}
}

func (x *BurstVersionResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *BurstVersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *BurstVersionResponse) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BurstVersionResponse) GetPontag() int64 {
	if x != nil {
		return x.Pontag
	}
	return 0
}

type BurstProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId        string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	OnuId           int32  `protobuf:"varint,2,opt,name=onu_id,json=onuId,proto3" json:"onu_id,omitempty"`
	Version         string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Index           int32  `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	DelimiterLength int32  `protobuf:"varint,5,opt,name=delimiter_length,json=delimiterLength,proto3" json:"delimiter_length,omitempty"`
	Delimiter       string `protobuf:"bytes,6,opt,name=delimiter,proto3" json:"delimiter,omitempty"`
	PreambleLength  int32  `protobuf:"varint,7,opt,name=preamble_length,json=preambleLength,proto3" json:"preamble_length,omitempty"`
	Preamble        string `protobuf:"bytes,8,opt,name=preamble,proto3" json:"preamble,omitempty"`
	Repeat          int32  `protobuf:"varint,9,opt,name=repeat,proto3" json:"repeat,omitempty"`
	Pontag          int64  `protobuf:"varint,10,opt,name=pontag,proto3" json:"pontag,omitempty"`
}

func (x *BurstProfileResponse) Reset() {
	*x = BurstProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BurstProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BurstProfileResponse) ProtoMessage() {}

func (x *BurstProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BurstProfileResponse.ProtoReflect.Descriptor instead.
func (*BurstProfileResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{54}
}

func (x *BurstProfileResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *BurstProfileResponse) GetOnuId() int32 {
	if x != nil {
		return x.OnuId
	}
	return 0
}

func (x *BurstProfileResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *BurstProfileResponse) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BurstProfileResponse) GetDelimiterLength() int32 {
	if x != nil {
		return x.DelimiterLength
	}
	return 0
}

func (x *BurstProfileResponse) GetDelimiter() string {
	if x != nil {
		return x.Delimiter
	}
	return ""
}

func (x *BurstProfileResponse) GetPreambleLength() int32 {
	if x != nil {
		return x.PreambleLength
	}
	return 0
}

func (x *BurstProfileResponse) GetPreamble() string {
	if x != nil {
		return x.Preamble
	}
	return ""
}

func (x *BurstProfileResponse) GetRepeat() int32 {
	if x != nil {
		return x.Repeat
	}
	return 0
}

func (x *BurstProfileResponse) GetPontag() int64 {
	if x != nil {
		return x.Pontag
	}
	return 0
}

type RegisterStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	OnuId    int32  `protobuf:"varint,2,opt,name=onu_id,json=onuId,proto3" json:"onu_id,omitempty"`
	Status   string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RegisterStatusResponse) Reset() {
	*x = RegisterStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterStatusResponse) ProtoMessage() {}

func (x *RegisterStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterStatusResponse.ProtoReflect.Descriptor instead.
func (*RegisterStatusResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{55}
}

func (x *RegisterStatusResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *RegisterStatusResponse) GetOnuId() int32 {
	if x != nil {
		return x.OnuId
	}
	return 0
}

func (x *RegisterStatusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type OnuInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	OnuId    int32  `protobuf:"varint,2,opt,name=onu_id,json=onuId,proto3" json:"onu_id,omitempty"`
	Rate     string `protobuf:"bytes,3,opt,name=rate,proto3" json:"rate,omitempty"`
	VendorId string `protobuf:"bytes,4,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	Vssn     string `protobuf:"bytes,5,opt,name=vssn,proto3" json:"vssn,omitempty"`
	Distance int32  `protobuf:"varint,6,opt,name=distance,proto3" json:"distance,omitempty"`
	Status   string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *OnuInfoResponse) Reset() {
	*x = OnuInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnuInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnuInfoResponse) ProtoMessage() {}

func (x *OnuInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnuInfoResponse.ProtoReflect.Descriptor instead.
func (*OnuInfoResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{56}
}

func (x *OnuInfoResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *OnuInfoResponse) GetOnuId() int32 {
	if x != nil {
		return x.OnuId
	}
	return 0
}

func (x *OnuInfoResponse) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

func (x *OnuInfoResponse) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *OnuInfoResponse) GetVssn() string {
	if x != nil {
		return x.Vssn
	}
	return ""
}

func (x *OnuInfoResponse) GetDistance() int32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *OnuInfoResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Status   string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{57}
}

func (x *StatusResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *StatusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type TodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Mode     int32  `protobuf:"varint,2,opt,name=mode,proto3" json:"mode,omitempty"`
	Time     int32  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TodResponse) Reset() {
	*x = TodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TodResponse) ProtoMessage() {}

func (x *TodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TodResponse.ProtoReflect.Descriptor instead.
func (*TodResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{58}
}

func (x *TodResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *TodResponse) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *TodResponse) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

type FecDecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Value    string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FecDecResponse) Reset() {
	*x = FecDecResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FecDecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FecDecResponse) ProtoMessage() {}

func (x *FecDecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FecDecResponse.ProtoReflect.Descriptor instead.
func (*FecDecResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{59}
}

func (x *FecDecResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *FecDecResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ErrorPermitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Value    int32  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ErrorPermitResponse) Reset() {
	*x = ErrorPermitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorPermitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorPermitResponse) ProtoMessage() {}

func (x *ErrorPermitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorPermitResponse.ProtoReflect.Descriptor instead.
func (*ErrorPermitResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{60}
}

func (x *ErrorPermitResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *ErrorPermitResponse) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type PmControlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId  string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Action    string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	OnuMode   string `protobuf:"bytes,3,opt,name=onu_mode,json=onuMode,proto3" json:"onu_mode,omitempty"`
	Transinit int32  `protobuf:"varint,4,opt,name=transinit,proto3" json:"transinit,omitempty"`
	Txinit    int32  `protobuf:"varint,5,opt,name=txinit,proto3" json:"txinit,omitempty"`
}

func (x *PmControlResponse) Reset() {
	*x = PmControlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PmControlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PmControlResponse) ProtoMessage() {}

func (x *PmControlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PmControlResponse.ProtoReflect.Descriptor instead.
func (*PmControlResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{61}
}

func (x *PmControlResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *PmControlResponse) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PmControlResponse) GetOnuMode() string {
	if x != nil {
		return x.OnuMode
	}
	return ""
}

func (x *PmControlResponse) GetTransinit() int32 {
	if x != nil {
		return x.Transinit
	}
	return 0
}

func (x *PmControlResponse) GetTxinit() int32 {
	if x != nil {
		return x.Txinit
	}
	return 0
}

type PmTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	OnuId    int32  `protobuf:"varint,2,opt,name=onu_id,json=onuId,proto3" json:"onu_id,omitempty"`
	Mode     string `protobuf:"bytes,3,opt,name=mode,proto3" json:"mode,omitempty"`
	Sleep    int32  `protobuf:"varint,4,opt,name=sleep,proto3" json:"sleep,omitempty"`
	Aware    int32  `protobuf:"varint,5,opt,name=aware,proto3" json:"aware,omitempty"`
	Rxoff    int32  `protobuf:"varint,6,opt,name=rxoff,proto3" json:"rxoff,omitempty"`
	Hold     int32  `protobuf:"varint,7,opt,name=hold,proto3" json:"hold,omitempty"`
	Action   string `protobuf:"bytes,8,opt,name=action,proto3" json:"action,omitempty"`
	Status   string `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PmTableResponse) Reset() {
	*x = PmTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PmTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PmTableResponse) ProtoMessage() {}

func (x *PmTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PmTableResponse.ProtoReflect.Descriptor instead.
func (*PmTableResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{62}
}

func (x *PmTableResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *PmTableResponse) GetOnuId() int32 {
	if x != nil {
		return x.OnuId
	}
	return 0
}

func (x *PmTableResponse) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *PmTableResponse) GetSleep() int32 {
	if x != nil {
		return x.Sleep
	}
	return 0
}

func (x *PmTableResponse) GetAware() int32 {
	if x != nil {
		return x.Aware
	}
	return 0
}

func (x *PmTableResponse) GetRxoff() int32 {
	if x != nil {
		return x.Rxoff
	}
	return 0
}

func (x *PmTableResponse) GetHold() int32 {
	if x != nil {
		return x.Hold
	}
	return 0
}

func (x *PmTableResponse) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PmTableResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type OmciDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Control  int32  `protobuf:"varint,2,opt,name=control,proto3" json:"control,omitempty"`
	Data     int32  `protobuf:"varint,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *OmciDataResponse) Reset() {
	*x = OmciDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmciDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmciDataResponse) ProtoMessage() {}

func (x *OmciDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmciDataResponse.ProtoReflect.Descriptor instead.
func (*OmciDataResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{63}
}

func (x *OmciDataResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *OmciDataResponse) GetControl() int32 {
	if x != nil {
		return x.Control
	}
	return 0
}

func (x *OmciDataResponse) GetData() int32 {
	if x != nil {
		return x.Data
	}
	return 0
}

type GetSliceBwResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Bw       int32  `protobuf:"varint,2,opt,name=bw,proto3" json:"bw,omitempty"`
}

func (x *GetSliceBwResponse) Reset() {
	*x = GetSliceBwResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSliceBwResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSliceBwResponse) ProtoMessage() {}

func (x *GetSliceBwResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSliceBwResponse.ProtoReflect.Descriptor instead.
func (*GetSliceBwResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{64}
}

func (x *GetSliceBwResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *GetSliceBwResponse) GetBw() int32 {
	if x != nil {
		return x.Bw
	}
	return 0
}

type SlaV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string  `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	OnuId    int32   `protobuf:"varint,2,opt,name=onu_id,json=onuId,proto3" json:"onu_id,omitempty"`
	Tcont    int32   `protobuf:"varint,3,opt,name=tcont,proto3" json:"tcont,omitempty"`
	AllocId  string  `protobuf:"bytes,4,opt,name=alloc_id,json=allocId,proto3" json:"alloc_id,omitempty"`
	Slice    int32   `protobuf:"varint,5,opt,name=slice,proto3" json:"slice,omitempty"`
	Bw       int32   `protobuf:"varint,6,opt,name=bw,proto3" json:"bw,omitempty"`
	Dba      string  `protobuf:"bytes,7,opt,name=dba,proto3" json:"dba,omitempty"`
	Type     string  `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	Fixed    int32   `protobuf:"varint,9,opt,name=fixed,proto3" json:"fixed,omitempty"`
	Assur    int32   `protobuf:"varint,10,opt,name=assur,proto3" json:"assur,omitempty"`
	Nogur    int32   `protobuf:"varint,11,opt,name=nogur,proto3" json:"nogur,omitempty"`
	Max      int32   `protobuf:"varint,12,opt,name=max,proto3" json:"max,omitempty"`
	Reach    float64 `protobuf:"fixed64,13,opt,name=reach,proto3" json:"reach,omitempty"`
}

func (x *SlaV2Response) Reset() {
	*x = SlaV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlaV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlaV2Response) ProtoMessage() {}

func (x *SlaV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlaV2Response.ProtoReflect.Descriptor instead.
func (*SlaV2Response) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{65}
}

func (x *SlaV2Response) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *SlaV2Response) GetOnuId() int32 {
	if x != nil {
		return x.OnuId
	}
	return 0
}

func (x *SlaV2Response) GetTcont() int32 {
	if x != nil {
		return x.Tcont
	}
	return 0
}

func (x *SlaV2Response) GetAllocId() string {
	if x != nil {
		return x.AllocId
	}
	return ""
}

func (x *SlaV2Response) GetSlice() int32 {
	if x != nil {
		return x.Slice
	}
	return 0
}

func (x *SlaV2Response) GetBw() int32 {
	if x != nil {
		return x.Bw
	}
	return 0
}

func (x *SlaV2Response) GetDba() string {
	if x != nil {
		return x.Dba
	}
	return ""
}

func (x *SlaV2Response) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SlaV2Response) GetFixed() int32 {
	if x != nil {
		return x.Fixed
	}
	return 0
}

func (x *SlaV2Response) GetAssur() int32 {
	if x != nil {
		return x.Assur
	}
	return 0
}

func (x *SlaV2Response) GetNogur() int32 {
	if x != nil {
		return x.Nogur
	}
	return 0
}

func (x *SlaV2Response) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *SlaV2Response) GetReach() float64 {
	if x != nil {
		return x.Reach
	}
	return 0
}

type BossOmciResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	OnuId    int32  `protobuf:"varint,2,opt,name=onu_id,json=onuId,proto3" json:"onu_id,omitempty"`
	OmciData string `protobuf:"bytes,3,opt,name=omci_data,json=omciData,proto3" json:"omci_data,omitempty"`
}

func (x *BossOmciResponse) Reset() {
	*x = BossOmciResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voltha_protos_bossopenolt_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BossOmciResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BossOmciResponse) ProtoMessage() {}

func (x *BossOmciResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voltha_protos_bossopenolt_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BossOmciResponse.ProtoReflect.Descriptor instead.
func (*BossOmciResponse) Descriptor() ([]byte, []int) {
	return file_voltha_protos_bossopenolt_proto_rawDescGZIP(), []int{66}
}

func (x *BossOmciResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *BossOmciResponse) GetOnuId() int32 {
	if x != nil {
		return x.OnuId
	}
	return 0
}

func (x *BossOmciResponse) GetOmciData() string {
	if x != nil {
		return x.OmciData
	}
	return ""
}

var File_voltha_protos_bossopenolt_proto protoreflect.FileDescriptor

var file_voltha_protos_bossopenolt_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x76, 0x6f, 0x6c, 0x74, 0x68, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0b, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5b, 0x0a, 0x0c,
	0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f,
	0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xdb, 0x10, 0x0a, 0x0b, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x73, 0x65, 0x74,
	0x70, 0x6d, 0x64, 0x74, 0x78, 0x64, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f,
	0x6c, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x6d, 0x64, 0x54, 0x78, 0x64, 0x69, 0x73, 0x48, 0x00,
	0x52, 0x10, 0x73, 0x65, 0x74, 0x70, 0x6d, 0x64, 0x74, 0x78, 0x64, 0x69, 0x73, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x47, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x70, 0x6d, 0x64, 0x73, 0x6b, 0x69, 0x6e,
	0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x6d, 0x64, 0x73, 0x4b, 0x69, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x10, 0x67, 0x65, 0x74, 0x70, 0x6d,
	0x64, 0x73, 0x6b, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x39, 0x0a, 0x0c, 0x73,
	0x65, 0x74, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e,
	0x53, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x70, 0x6f,
	0x72, 0x74, 0x41, 0x72, 0x61, 0x6d, 0x12, 0x47, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x70, 0x6f, 0x72,
	0x74, 0x6b, 0x69, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e,
	0x53, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x10, 0x73,
	0x65, 0x74, 0x70, 0x6f, 0x72, 0x74, 0x6b, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x44, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x6d, 0x74, 0x75, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x73,
	0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x74, 0x75, 0x53, 0x69,
	0x7a, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x6d, 0x74, 0x75, 0x73, 0x69, 0x7a, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62,
	0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x56, 0x6c,
	0x61, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x76, 0x6c, 0x61, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x56, 0x0a, 0x16, 0x73, 0x65, 0x74, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74,
	0x2e, 0x53, 0x65, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x48, 0x00, 0x52, 0x15, 0x73, 0x65, 0x74, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6d, 0x6d, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x59, 0x0a, 0x17, 0x67, 0x65,
	0x74, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x6f,
	0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x16, 0x67,
	0x65, 0x74, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x4a, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x11,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x47, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x73, 0x64, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62,
	0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x64,
	0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x10, 0x73, 0x65, 0x74, 0x73, 0x64, 0x6e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x47, 0x0a, 0x11, 0x67, 0x65,
	0x74, 0x73, 0x64, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e,
	0x6f, 0x6c, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x64, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x48,
	0x00, 0x52, 0x10, 0x67, 0x65, 0x74, 0x73, 0x64, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x41, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62,
	0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x41, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3b, 0x0a, 0x0d, 0x6f, 0x6e, 0x75,
	0x63, 0x74, 0x72, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x4f,
	0x6e, 0x75, 0x43, 0x74, 0x72, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x6e, 0x75, 0x63, 0x74, 0x72,
	0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x41, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x75,
	0x73, 0x6c, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x41, 0x64,
	0x64, 0x4f, 0x6e, 0x75, 0x53, 0x6c, 0x61, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x6f, 0x6e,
	0x75, 0x73, 0x6c, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x47, 0x0a, 0x11, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x6f, 0x6e, 0x75, 0x73, 0x6c, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f,
	0x6c, 0x74, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4f, 0x6e, 0x75, 0x53, 0x6c, 0x61, 0x48, 0x00,
	0x52, 0x10, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x6f, 0x6e, 0x75, 0x73, 0x6c, 0x61, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x4d, 0x0a, 0x13, 0x73, 0x65, 0x74, 0x6f, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x53, 0x65,
	0x74, 0x4f, 0x6e, 0x75, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x69, 0x64, 0x48, 0x00, 0x52, 0x12, 0x73,
	0x65, 0x74, 0x6f, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x44, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x6f, 0x6e, 0x75, 0x76, 0x73, 0x73, 0x6e, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f,
	0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x6e, 0x75,
	0x56, 0x73, 0x73, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x6f, 0x6e, 0x75, 0x76, 0x73,
	0x73, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x53, 0x0a, 0x15, 0x73, 0x65, 0x74, 0x62, 0x75,
	0x72, 0x73, 0x74, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65,
	0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x75, 0x72, 0x73, 0x74, 0x44, 0x65, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x14, 0x73, 0x65, 0x74, 0x62, 0x75, 0x72, 0x73, 0x74,
	0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x56, 0x0a, 0x16,
	0x73, 0x65, 0x74, 0x62, 0x75, 0x72, 0x73, 0x74, 0x70, 0x72, 0x65, 0x61, 0x6d, 0x62, 0x6c, 0x65,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62,
	0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x75,
	0x72, 0x73, 0x74, 0x50, 0x72, 0x65, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x15, 0x73,
	0x65, 0x74, 0x62, 0x75, 0x72, 0x73, 0x74, 0x70, 0x72, 0x65, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x53, 0x0a, 0x15, 0x73, 0x65, 0x74, 0x62, 0x75, 0x72, 0x73, 0x74,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c,
	0x74, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x75, 0x72, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x14, 0x73, 0x65, 0x74, 0x62, 0x75, 0x72, 0x73, 0x74, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x4d, 0x0a, 0x13, 0x73, 0x65, 0x74,
	0x64, 0x73, 0x6f, 0x6d, 0x63, 0x69, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65,
	0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x73, 0x4f, 0x6d, 0x63, 0x69, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x12, 0x73, 0x65, 0x74, 0x64, 0x73, 0x6f, 0x6d, 0x63, 0x69, 0x64,
	0x61, 0x74, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x38, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x74,
	0x6f, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x53, 0x65, 0x74,
	0x54, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6f, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x47, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x4a, 0x0a, 0x12, 0x73,
	0x65, 0x74, 0x70, 0x6d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70,
	0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x48, 0x00, 0x52, 0x11, 0x73, 0x65, 0x74, 0x70, 0x6d, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x44, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x62, 0x77, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e,
	0x53, 0x65, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x42, 0x77, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x65,
	0x74, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x62, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x44, 0x0a,
	0x10, 0x67, 0x65, 0x74, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x62, 0x77, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70,
	0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x42, 0x77,
	0x48, 0x00, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x62, 0x77, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x3e, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x73, 0x6c, 0x61, 0x76, 0x32, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f,
	0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x6c, 0x61,
	0x56, 0x32, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x73, 0x6c, 0x61, 0x76, 0x32, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x6f, 0x6d, 0x63, 0x69, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x4f, 0x6d, 0x63, 0x69, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x11, 0x73, 0x65,
	0x6e, 0x64, 0x6f, 0x6d, 0x63, 0x69, 0x64, 0x61, 0x74, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42,
	0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x42, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x4f,
	0x6d, 0x63, 0x69, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x6e, 0x75, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x6e, 0x75, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x6f, 0x6d, 0x63, 0x69, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x6d, 0x63, 0x69, 0x44, 0x61, 0x74, 0x61, 0x22, 0xa8, 0x01, 0x0a, 0x08,
	0x53, 0x65, 0x74, 0x53, 0x6c, 0x61, 0x56, 0x32, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x6e, 0x75, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x6e, 0x75, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x74, 0x63, 0x6f, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x63,
	0x6f, 0x5f, 0x64, 0x62, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x44,
	0x62, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x66, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x72, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x61, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x72, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x72, 0x6e, 0x22, 0x32, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x42, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x77,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x62, 0x77, 0x22, 0x22, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x42, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x22, 0x77,
	0x0a, 0x0c, 0x53, 0x65, 0x74, 0x50, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x15,
	0x0a, 0x06, 0x6f, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6f, 0x6e, 0x75, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x77,
	0x61, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x54, 0x6f,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x3d, 0x0a, 0x0d, 0x53, 0x65, 0x74,
	0x44, 0x73, 0x4f, 0x6d, 0x63, 0x69, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x59, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x42,
	0x75, 0x72, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x6f, 0x6e, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6f, 0x6e,
	0x74, 0x61, 0x67, 0x22, 0x2a, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x42, 0x75, 0x72, 0x73, 0x74, 0x50,
	0x72, 0x65, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x22,
	0x47, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x42, 0x75, 0x72, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x22, 0x37, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x4f,
	0x6e, 0x75, 0x56, 0x73, 0x73, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x6e, 0x75, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x6e, 0x75, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x76, 0x73, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x73, 0x73,
	0x6e, 0x22, 0x41, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x4f, 0x6e, 0x75, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6f, 0x6e, 0x75, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x0b, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4f, 0x6e, 0x75,
	0x53, 0x6c, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x6e, 0x75, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x63,
	0x6f, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x63, 0x6f, 0x6e, 0x74,
	0x22, 0x88, 0x01, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x75, 0x53, 0x6c, 0x61, 0x12, 0x15,
	0x0a, 0x06, 0x6f, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6f, 0x6e, 0x75, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x73, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x73, 0x69, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x62, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x61, 0x62, 0x6d, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x62, 0x73, 0x75, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x62, 0x73, 0x75, 0x72, 0x22, 0x57, 0x0a, 0x0b, 0x53,
	0x65, 0x74, 0x50, 0x6d, 0x64, 0x54, 0x78, 0x64, 0x69, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f,
	0x72, 0x74, 0x4e, 0x6f, 0x22, 0x43, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x6d, 0x64, 0x73, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x22, 0x36, 0x0a, 0x07, 0x53, 0x65, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x4e,
	0x6f, 0x22, 0x26, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x22, 0x27, 0x0a, 0x0a, 0x53, 0x65, 0x74,
	0x4d, 0x74, 0x75, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x74, 0x75, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x74, 0x75, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x47, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x76, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x62, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x62, 0x69, 0x74, 0x22, 0x4c, 0x0a, 0x0b, 0x53,
	0x65, 0x74, 0x53, 0x64, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x76, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x62, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x62, 0x69, 0x74, 0x22, 0x44, 0x0a, 0x10, 0x53, 0x65, 0x74,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22,
	0x31, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x27, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x64, 0x6e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x24, 0x0a, 0x0c, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x23, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3f, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x29, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x20, 0x0a, 0x07, 0x4f, 0x6e, 0x75, 0x43, 0x74, 0x72, 0x6c, 0x12, 0x15, 0x0a,
	0x06, 0x6f, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f,
	0x6e, 0x75, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x0f, 0x4f, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x22, 0xb2, 0x01, 0x0a, 0x0e, 0x4f, 0x6c, 0x74, 0x44, 0x65,
	0x76, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x70, 0x67, 0x61, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x70, 0x67, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x70, 0x67, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x70, 0x67, 0x61, 0x56, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x70, 0x67, 0x61, 0x5f, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x70, 0x67, 0x61, 0x44, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x73,
	0x77, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x77, 0x56,
	0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x77, 0x44, 0x61, 0x74, 0x65, 0x22, 0x24, 0x0a, 0x0a, 0x45,
	0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x43, 0x0a, 0x10, 0x50, 0x6d, 0x64, 0x54, 0x78, 0x64, 0x69, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x11, 0x50, 0x6d, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x40, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x23, 0x0a,
	0x0f, 0x4d, 0x74, 0x75, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d,
	0x74, 0x75, 0x22, 0x63, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x3f, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x4f, 0x0a, 0x11, 0x41, 0x67, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x12, 0x44, 0x65,
	0x76, 0x4d, 0x61, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x74, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12,
	0x1b, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x13, 0x53, 0x64,
	0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x68, 0x61, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x22, 0x76, 0x0a, 0x10,
	0x53, 0x64, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x76, 0x6c, 0x61, 0x6e, 0x22, 0x43, 0x0a, 0x0e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x46, 0x0a, 0x11, 0x51, 0x75, 0x69,
	0x65, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xa1, 0x01, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6f, 0x6e, 0x75, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x73, 0x73, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x76, 0x73, 0x73, 0x6e, 0x22, 0x43, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x6c, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04,
	0x72, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x73,
	0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x53, 0x6c, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x72, 0x65, 0x73, 0x70, 0x22, 0xd5, 0x01, 0x0a, 0x0b, 0x53,
	0x6c, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x6e, 0x75, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x6e, 0x75, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x63, 0x6f, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x69, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x73, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x62, 0x6d, 0x69,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x62, 0x6d, 0x69, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x62, 0x73, 0x75, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61,
	0x62, 0x73, 0x75, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x66, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0x59, 0x0a, 0x0f, 0x4f, 0x6e, 0x75, 0x56, 0x73, 0x73, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6f, 0x6e, 0x75, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x73, 0x73,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x73, 0x73, 0x6e, 0x22, 0x61, 0x0a,
	0x0f, 0x4f, 0x6e, 0x75, 0x44, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x6f, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f,
	0x6e, 0x75, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0x69, 0x0a, 0x14, 0x42, 0x75, 0x72, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x22, 0x80, 0x01, 0x0a, 0x15,
	0x42, 0x75, 0x72, 0x73, 0x74, 0x50, 0x72, 0x65, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x65, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x65, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x22, 0x7b,
	0x0a, 0x14, 0x42, 0x75, 0x72, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6e, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6f, 0x6e, 0x74, 0x61, 0x67, 0x22, 0xb8, 0x02, 0x0a, 0x14,
	0x42, 0x75, 0x72, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6f, 0x6e, 0x75, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x72, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x61,
	0x6d, 0x62, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x65, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x65, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x6f, 0x6e, 0x74, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x70, 0x6f, 0x6e, 0x74, 0x61, 0x67, 0x22, 0x64, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x6f, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f,
	0x6e, 0x75, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbe, 0x01, 0x0a,
	0x0f, 0x4f, 0x6e, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x6f, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f,
	0x6e, 0x75, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x73, 0x73, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x73, 0x73, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x45, 0x0a,
	0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x52, 0x0a, 0x0b, 0x54, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x0e, 0x46, 0x65, 0x63, 0x44,
	0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x48, 0x0a,
	0x13, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x11, 0x50, 0x6d, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6e, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x6e, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x78, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x78, 0x69,
	0x6e, 0x69, 0x74, 0x22, 0xdf, 0x01, 0x0a, 0x0f, 0x50, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x6e, 0x75, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x6c, 0x65, 0x65, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x77, 0x61, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x77, 0x61, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x78, 0x6f, 0x66, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x78, 0x6f, 0x66,
	0x66, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5d, 0x0a, 0x10, 0x4f, 0x6d, 0x63, 0x69, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x41, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x42, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x77, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x62, 0x77, 0x22, 0xaa, 0x02, 0x0a, 0x0d, 0x53, 0x6c, 0x61, 0x56,
	0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x6e, 0x75, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x6e, 0x75, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x63,
	0x6f, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73,
	0x6c, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x62, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x62, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x64, 0x62, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x75, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x61, 0x73, 0x73, 0x75, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x67, 0x75, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x6f, 0x67, 0x75, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x61, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x65, 0x61, 0x63, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x22, 0x63, 0x0a, 0x10, 0x42, 0x6f, 0x73, 0x73, 0x4f, 0x6d, 0x63, 0x69,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x6e, 0x75, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6f, 0x6d, 0x63, 0x69, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x6d, 0x63, 0x69, 0x44, 0x61, 0x74, 0x61, 0x32, 0x9b, 0x3c, 0x0a, 0x0b, 0x42, 0x6f,
	0x73, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x12, 0x6f, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x4f, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73,
	0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e,
	0x6f, 0x6c, 0x74, 0x2e, 0x4f, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x6f, 0x6c, 0x74,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x74, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x4f, 0x6c, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19,
	0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x62, 0x6f, 0x73, 0x73,
	0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x4f, 0x6c, 0x74, 0x44, 0x65, 0x76, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74,
	0x6f, 0x6c, 0x74, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x3a, 0x01, 0x2a,
	0x12, 0x66, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x50, 0x6d, 0x64, 0x54, 0x78, 0x44, 0x69, 0x73, 0x12,
	0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f,
	0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x6f, 0x73,
	0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x70, 0x6d, 0x64,
	0x74, 0x78, 0x64, 0x69, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x6c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50,
	0x6d, 0x64, 0x54, 0x78, 0x64, 0x69, 0x73, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70,
	0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74,
	0x2e, 0x50, 0x6d, 0x64, 0x54, 0x78, 0x64, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x70, 0x6d, 0x64, 0x74, 0x78,
	0x64, 0x69, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x7b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x6d, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x2e, 0x62,
	0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70,
	0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x50, 0x6d, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22,
	0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65,
	0x74, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x6d, 0x64, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x3a, 0x01, 0x2a, 0x12, 0x6a, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f,
	0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f,
	0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x65, 0x74, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x12,
	0x6f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62,
	0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x6f,
	0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1f, 0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x65, 0x74, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x01, 0x2a,
	0x12, 0x62, 0x0a, 0x09, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x19, 0x2e,
	0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f,
	0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x3a, 0x01, 0x2a, 0x12, 0x64, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x4d, 0x74, 0x75, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74,
	0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74,
	0x6d, 0x74, 0x75, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x69, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x4d, 0x74, 0x75, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f,
	0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c,
	0x74, 0x2e, 0x4d, 0x74, 0x75, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x6d, 0x74, 0x75, 0x73, 0x69,
	0x7a, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x5e, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e,
	0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62,
	0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x6f,
	0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x76, 0x6c,
	0x61, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x63, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e,
	0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62,
	0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x6f,
	0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x65, 0x74, 0x76, 0x6c, 0x61, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x64, 0x0a, 0x0a, 0x53, 0x65,
	0x74, 0x4c, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f,
	0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c,
	0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x22, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x6c, 0x75, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x3a, 0x01, 0x2a,
	0x12, 0x66, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4c, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19,
	0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73,
	0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x6c, 0x75,
	0x74, 0x6d, 0x6f, 0x64, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x68, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x41,
	0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f,
	0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c,
	0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x24, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x6d, 0x6f, 0x64, 0x65, 0x3a,
	0x01, 0x2a, 0x12, 0x6a, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74,
	0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e,
	0x22, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x65, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x6d, 0x6f, 0x64, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x68,
	0x0a, 0x0c, 0x53, 0x65, 0x74, 0x41, 0x67, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x73,
	0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x6f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41,
	0x67, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f,
	0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c,
	0x74, 0x2e, 0x41, 0x67, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x78, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x2e,
	0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f,
	0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x4d, 0x61, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x65, 0x74, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x63, 0x69, 0x6e, 0x66, 0x6f,
	0x3a, 0x01, 0x2a, 0x12, 0x6f, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x53, 0x64, 0x6e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74,
	0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x53, 0x64, 0x6e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f,
	0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x73, 0x64, 0x6e, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x3a, 0x01, 0x2a, 0x12, 0x6c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x64, 0x6e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c,
	0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x53, 0x64, 0x6e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x73, 0x64, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x3a,
	0x01, 0x2a, 0x12, 0x62, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f,
	0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x6f, 0x73,
	0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x3a, 0x01, 0x2a, 0x12, 0x66, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c,
	0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x67, 0x65, 0x74, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x01, 0x2a, 0x12, 0x68,
	0x0a, 0x0c, 0x53, 0x65, 0x74, 0x51, 0x75, 0x69, 0x65, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x19,
	0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x73,
	0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x71, 0x75, 0x69, 0x65,
	0x74, 0x7a, 0x6f, 0x6e, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x6f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x51,
	0x75, 0x69, 0x65, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f,
	0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c,
	0x74, 0x2e, 0x51, 0x75, 0x69, 0x65, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x71, 0x75, 0x69,
	0x65, 0x74, 0x7a, 0x6f, 0x6e, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x64, 0x0a, 0x0a, 0x53, 0x65, 0x74,
	0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70,
	0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x22, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x65, 0x74, 0x66, 0x65, 0x63, 0x6d, 0x6f, 0x64, 0x65, 0x3a, 0x01, 0x2a, 0x12,
	0x66, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x2e,
	0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f,
	0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x66, 0x65, 0x63,
	0x6d, 0x6f, 0x64, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x60, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x4f, 0x6e,
	0x75, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e,
	0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x62,
	0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x6e,
	0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x64, 0x64, 0x6f, 0x6e, 0x75, 0x3a, 0x01, 0x2a, 0x12, 0x62, 0x0a, 0x0c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x6e, 0x75, 0x32, 0x35, 0x47, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73,
	0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f,
	0x6c, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x6f, 0x6e, 0x75, 0x3a, 0x01, 0x2a, 0x12, 0x62, 0x0a,
	0x09, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x75, 0x53, 0x6c, 0x61, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73,
	0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e,
	0x6f, 0x6c, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x21,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x75, 0x73, 0x6c, 0x61, 0x3a, 0x01,
	0x2a, 0x12, 0x66, 0x0a, 0x0b, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4f, 0x6e, 0x75, 0x53, 0x6c, 0x61,
	0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62,
	0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x6f,
	0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x6f, 0x6e, 0x75, 0x73, 0x6c, 0x61, 0x3a, 0x01, 0x2a, 0x12, 0x6f, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x53, 0x6c, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f,
	0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c,
	0x74, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x6c, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x73,
	0x6c, 0x61, 0x74, 0x61, 0x6c, 0x62, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x6a, 0x0a, 0x0d, 0x53, 0x65,
	0x74, 0x4f, 0x6e, 0x75, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x69, 0x64, 0x12, 0x19, 0x2e, 0x62, 0x6f,
	0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65,
	0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f,
	0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x6f, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x69, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x6a, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x75,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x69, 0x64, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70,
	0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x25, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x65, 0x6c, 0x6f, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x69, 0x64, 0x3a,
	0x01, 0x2a, 0x12, 0x64, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x4f, 0x6e, 0x75, 0x56, 0x73, 0x73, 0x6e,
	0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62,
	0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x6f,
	0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x6f, 0x6e,
	0x75, 0x76, 0x73, 0x73, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x68, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4f,
	0x6e, 0x75, 0x56, 0x73, 0x73, 0x6e, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65,
	0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e,
	0x4f, 0x6e, 0x75, 0x56, 0x73, 0x73, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x6f, 0x6e, 0x75, 0x76, 0x73, 0x73, 0x6e, 0x3a,
	0x01, 0x2a, 0x12, 0x71, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x75, 0x44, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f,
	0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x4f, 0x6e,
	0x75, 0x44, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x6f, 0x6e, 0x75, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x72, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x42, 0x75, 0x72, 0x73,
	0x74, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73,
	0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e,
	0x6f, 0x6c, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x29,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x62, 0x75, 0x72, 0x73, 0x74, 0x64, 0x65, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x7c, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x42, 0x75, 0x72, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x19,
	0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x6f, 0x73, 0x73,
	0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x42, 0x75, 0x72, 0x73, 0x74, 0x44, 0x65, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x62, 0x75, 0x72, 0x73, 0x74, 0x64, 0x65, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x70, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x42, 0x75,
	0x72, 0x73, 0x74, 0x50, 0x72, 0x65, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x2e, 0x62, 0x6f,
	0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65,
	0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f,
	0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x62, 0x75, 0x72, 0x73, 0x74, 0x70, 0x72,
	0x65, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x7b, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x42, 0x75, 0x72, 0x73, 0x74, 0x50, 0x72, 0x65, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x2e,
	0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f,
	0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x42, 0x75, 0x72, 0x73, 0x74, 0x50, 0x72, 0x65, 0x61,
	0x6d, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x62, 0x75, 0x72, 0x73, 0x74, 0x70, 0x72, 0x65, 0x61, 0x6d,
	0x62, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x6e, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x42, 0x75, 0x72,
	0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73,
	0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f,
	0x6c, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x27, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x62, 0x75, 0x72, 0x73, 0x74, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x78, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x75, 0x72,
	0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73,
	0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f,
	0x6c, 0x74, 0x2e, 0x42, 0x75, 0x72, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22,
	0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65,
	0x74, 0x62, 0x75, 0x72, 0x73, 0x74, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a,
	0x12, 0x6e, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x42, 0x75, 0x72, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c,
	0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22,
	0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65,
	0x74, 0x62, 0x75, 0x72, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x3a, 0x01, 0x2a,
	0x12, 0x78, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x75, 0x72, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c,
	0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x42, 0x75, 0x72,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x62, 0x75, 0x72, 0x73, 0x74,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x7e, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f,
	0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x62, 0x6f, 0x73,
	0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f,
	0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x69, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x4f, 0x6e, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f,
	0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c,
	0x74, 0x2e, 0x4f, 0x6e, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x6f, 0x6e, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x3a, 0x01, 0x2a, 0x12, 0x70, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4f, 0x6d, 0x63, 0x69,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65,
	0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x62, 0x75, 0x72, 0x73, 0x74, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x68, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x44, 0x73,
	0x4f, 0x6d, 0x63, 0x69, 0x4f, 0x6e, 0x75, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70,
	0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x24, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x65, 0x74, 0x64, 0x73, 0x6f, 0x6d, 0x63, 0x69, 0x6f, 0x6e, 0x75, 0x3a, 0x01,
	0x2a, 0x12, 0x68, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x44, 0x73, 0x4f, 0x6d, 0x63, 0x69, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74,
	0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18,
	0x61, 0x70, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x64, 0x73,
	0x6f, 0x6d, 0x63, 0x69, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x01, 0x2a, 0x12, 0x6e, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x4f, 0x6d, 0x63, 0x69, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x2e, 0x62,
	0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70,
	0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x4f, 0x6d, 0x63, 0x69, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18,
	0x61, 0x70, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x75, 0x73,
	0x6f, 0x6d, 0x63, 0x69, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x01, 0x2a, 0x12, 0x5c, 0x0a, 0x06, 0x53,
	0x65, 0x74, 0x54, 0x6f, 0x64, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e,
	0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x74, 0x74, 0x6f, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x5d, 0x0a, 0x06, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x64, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c,
	0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x54, 0x6f, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18,
	0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x65, 0x74, 0x74, 0x6f, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x66, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70,
	0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x23, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x3a, 0x01, 0x2a,
	0x12, 0x68, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f,
	0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x6f, 0x73,
	0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x6a, 0x0a, 0x0d, 0x53, 0x65,
	0x74, 0x46, 0x65, 0x63, 0x44, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x2e, 0x62, 0x6f,
	0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65,
	0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f,
	0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x66, 0x65, 0x63, 0x64, 0x65, 0x63, 0x6d,
	0x6f, 0x64, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x6c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x46, 0x65, 0x63,
	0x44, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70,
	0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x66, 0x65, 0x63, 0x64, 0x65, 0x63, 0x6d, 0x6f, 0x64,
	0x65, 0x3a, 0x01, 0x2a, 0x12, 0x68, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f,
	0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e,
	0x22, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x65, 0x74, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x6c,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x19,
	0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x62, 0x6f, 0x73, 0x73,
	0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x46, 0x65, 0x63, 0x44, 0x65, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74,
	0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x6c, 0x0a, 0x0e,
	0x53, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x12, 0x19,
	0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x73,
	0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x75, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x2e, 0x62,
	0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70,
	0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x20, 0x22, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x65, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x3a, 0x01,
	0x2a, 0x12, 0x68, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x50, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e,
	0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62,
	0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x70,
	0x6d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x6f, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x50, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x19, 0x2e, 0x62, 0x6f,
	0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65,
	0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x50, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74,
	0x70, 0x6d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x69, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x50, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73,
	0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e,
	0x6f, 0x6c, 0x74, 0x2e, 0x50, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x70, 0x6d, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x5e, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x53, 0x41,
	0x4f, 0x6e, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74,
	0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74,
	0x73, 0x61, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x60, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x53, 0x41,
	0x4f, 0x66, 0x66, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c,
	0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22,
	0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65,
	0x74, 0x73, 0x61, 0x6f, 0x66, 0x66, 0x3a, 0x01, 0x2a, 0x12, 0x64, 0x0a, 0x0a, 0x53, 0x65, 0x74,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x42, 0x77, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70,
	0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x22, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x65, 0x74, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x62, 0x77, 0x3a, 0x01, 0x2a, 0x12,
	0x6c, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x42, 0x77, 0x12, 0x19, 0x2e,
	0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f,
	0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x42,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x22, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x65, 0x74, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x62, 0x77, 0x3a, 0x01, 0x2a, 0x12, 0x63, 0x0a,
	0x08, 0x53, 0x65, 0x74, 0x53, 0x6c, 0x61, 0x56, 0x32, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73,
	0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f,
	0x6c, 0x74, 0x2e, 0x53, 0x6c, 0x61, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62,
	0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x73, 0x6c, 0x61, 0x76, 0x32, 0x3a,
	0x01, 0x2a, 0x12, 0x63, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x61, 0x56, 0x32, 0x12, 0x19,
	0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x73,
	0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x53, 0x6c, 0x61, 0x56, 0x32, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x73,
	0x6c, 0x61, 0x76, 0x32, 0x3a, 0x01, 0x2a, 0x12, 0x6e, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x4f,
	0x6d, 0x63, 0x69, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70,
	0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74,
	0x2e, 0x42, 0x6f, 0x73, 0x73, 0x4f, 0x6d, 0x63, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x62, 0x6f, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x6f, 0x6d, 0x63, 0x69,
	0x64, 0x61, 0x74, 0x61, 0x3a, 0x01, 0x2a, 0x42, 0x69, 0x0a, 0x1f, 0x6f, 0x72, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x6f, 0x6c, 0x74, 0x68, 0x61, 0x2e, 0x62,
	0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x6c, 0x74, 0x42, 0x11, 0x56, 0x6f, 0x6c, 0x74,
	0x68, 0x61, 0x42, 0x6f, 0x73, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x4c, 0x54, 0x5a, 0x33, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x2f, 0x76, 0x6f, 0x6c, 0x74, 0x68, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x76, 0x35, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6f, 0x73, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x6f,
	0x6c, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_voltha_protos_bossopenolt_proto_rawDescOnce sync.Once
	file_voltha_protos_bossopenolt_proto_rawDescData = file_voltha_protos_bossopenolt_proto_rawDesc
)

func file_voltha_protos_bossopenolt_proto_rawDescGZIP() []byte {
	file_voltha_protos_bossopenolt_proto_rawDescOnce.Do(func() {
		file_voltha_protos_bossopenolt_proto_rawDescData = protoimpl.X.CompressGZIP(file_voltha_protos_bossopenolt_proto_rawDescData)
	})
	return file_voltha_protos_bossopenolt_proto_rawDescData
}

var file_voltha_protos_bossopenolt_proto_msgTypes = make([]protoimpl.MessageInfo, 67)
var file_voltha_protos_bossopenolt_proto_goTypes = []interface{}{
	(*BossRequest)(nil),            // 0: bossopenolt.boss_request
	(*ParamFields)(nil),            // 1: bossopenolt.paramFields
	(*SendOmciData)(nil),           // 2: bossopenolt.SendOmciData
	(*SetSlaV2)(nil),               // 3: bossopenolt.SetSlaV2
	(*SetSliceBw)(nil),             // 4: bossopenolt.SetSliceBw
	(*GetSliceBw)(nil),             // 5: bossopenolt.GetSliceBw
	(*SetPmControl)(nil),           // 6: bossopenolt.SetPmControl
	(*SetTod)(nil),                 // 7: bossopenolt.SetTod
	(*SetDsOmciData)(nil),          // 8: bossopenolt.SetDsOmciData
	(*SetBurstVersion)(nil),        // 9: bossopenolt.SetBurstVersion
	(*SetBurstPreamble)(nil),       // 10: bossopenolt.SetBurstPreamble
	(*SetBurstDelimit)(nil),        // 11: bossopenolt.SetBurstDelimit
	(*SetOnuVssn)(nil),             // 12: bossopenolt.SetOnuVssn
	(*SetOnuAllocid)(nil),          // 13: bossopenolt.SetOnuAllocid
	(*ClearOnuSla)(nil),            // 14: bossopenolt.ClearOnuSla
	(*AddOnuSla)(nil),              // 15: bossopenolt.AddOnuSla
	(*SetPmdTxdis)(nil),            // 16: bossopenolt.SetPmdTxdis
	(*GetPmdsKind)(nil),            // 17: bossopenolt.GetPmdsKind
	(*SetPort)(nil),                // 18: bossopenolt.SetPort
	(*SetPortKind)(nil),            // 19: bossopenolt.SetPortKind
	(*SetMtuSize)(nil),             // 20: bossopenolt.SetMtuSize
	(*SetVlan)(nil),                // 21: bossopenolt.SetVlan
	(*SetSdnTable)(nil),            // 22: bossopenolt.SetSdnTable
	(*SetDirectionMode)(nil),       // 23: bossopenolt.SetDirectionMode
	(*GetDirectionValue)(nil),      // 24: bossopenolt.GetDirectionValue
	(*GetSdnTable)(nil),            // 25: bossopenolt.GetSdnTable
	(*IntegerValue)(nil),           // 26: bossopenolt.IntegerValue
	(*StringValue)(nil),            // 27: bossopenolt.StringValue
	(*SetLength)(nil),              // 28: bossopenolt.SetLength
	(*GetLength)(nil),              // 29: bossopenolt.GetLength
	(*OnuCtrl)(nil),                // 30: bossopenolt.OnuCtrl
	(*OltConnResponse)(nil),        // 31: bossopenolt.OltConnResponse
	(*OltDevResponse)(nil),         // 32: bossopenolt.OltDevResponse
	(*ExecResult)(nil),             // 33: bossopenolt.ExecResult
	(*PmdTxdisResponse)(nil),       // 34: bossopenolt.PmdTxdisResponse
	(*PmdStatusResponse)(nil),      // 35: bossopenolt.PmdStatusResponse
	(*GetPortResponse)(nil),        // 36: bossopenolt.GetPortResponse
	(*MtuSizeResponse)(nil),        // 37: bossopenolt.MtuSizeResponse
	(*GetVlanResponse)(nil),        // 38: bossopenolt.GetVlanResponse
	(*ModeResponse)(nil),           // 39: bossopenolt.ModeResponse
	(*AgingTimeResponse)(nil),      // 40: bossopenolt.AgingTimeResponse
	(*DevMacInfoResponse)(nil),     // 41: bossopenolt.DevMacInfoResponse
	(*SdnTableKeyResponse)(nil),    // 42: bossopenolt.SdnTableKeyResponse
	(*SdnTableResponse)(nil),       // 43: bossopenolt.SdnTableResponse
	(*LengthResponse)(nil),         // 44: bossopenolt.LengthResponse
	(*QuietZoneResponse)(nil),      // 45: bossopenolt.QuietZoneResponse
	(*AddOnuResponse)(nil),         // 46: bossopenolt.AddOnuResponse
	(*RepeatedSlaResponse)(nil),    // 47: bossopenolt.RepeatedSlaResponse
	(*SlaResponse)(nil),            // 48: bossopenolt.SlaResponse
	(*OnuVssnResponse)(nil),        // 49: bossopenolt.OnuVssnResponse
	(*OnuDistResponse)(nil),        // 50: bossopenolt.OnuDistResponse
	(*BurstDelimitResponse)(nil),   // 51: bossopenolt.BurstDelimitResponse
	(*BurstPreambleResponse)(nil),  // 52: bossopenolt.BurstPreambleResponse
	(*BurstVersionResponse)(nil),   // 53: bossopenolt.BurstVersionResponse
	(*BurstProfileResponse)(nil),   // 54: bossopenolt.BurstProfileResponse
	(*RegisterStatusResponse)(nil), // 55: bossopenolt.RegisterStatusResponse
	(*OnuInfoResponse)(nil),        // 56: bossopenolt.OnuInfoResponse
	(*StatusResponse)(nil),         // 57: bossopenolt.StatusResponse
	(*TodResponse)(nil),            // 58: bossopenolt.TodResponse
	(*FecDecResponse)(nil),         // 59: bossopenolt.FecDecResponse
	(*ErrorPermitResponse)(nil),    // 60: bossopenolt.ErrorPermitResponse
	(*PmControlResponse)(nil),      // 61: bossopenolt.PmControlResponse
	(*PmTableResponse)(nil),        // 62: bossopenolt.PmTableResponse
	(*OmciDataResponse)(nil),       // 63: bossopenolt.OmciDataResponse
	(*GetSliceBwResponse)(nil),     // 64: bossopenolt.GetSliceBwResponse
	(*SlaV2Response)(nil),          // 65: bossopenolt.SlaV2Response
	(*BossOmciResponse)(nil),       // 66: bossopenolt.BossOmciResponse
}
var file_voltha_protos_bossopenolt_proto_depIdxs = []int32{
	1,   // 0: bossopenolt.boss_request.param:type_name -> bossopenolt.paramFields
	16,  // 1: bossopenolt.paramFields.setpmdtxdis_param:type_name -> bossopenolt.SetPmdTxdis
	17,  // 2: bossopenolt.paramFields.getpmdskind_param:type_name -> bossopenolt.GetPmdsKind
	18,  // 3: bossopenolt.paramFields.setport_aram:type_name -> bossopenolt.SetPort
	19,  // 4: bossopenolt.paramFields.setportkind_param:type_name -> bossopenolt.SetPortKind
	20,  // 5: bossopenolt.paramFields.setmtusize_param:type_name -> bossopenolt.SetMtuSize
	21,  // 6: bossopenolt.paramFields.setvlan_param:type_name -> bossopenolt.SetVlan
	23,  // 7: bossopenolt.paramFields.setdirectiommode_param:type_name -> bossopenolt.SetDirectionMode
	24,  // 8: bossopenolt.paramFields.getdirectionvalue_param:type_name -> bossopenolt.GetDirectionValue
	26,  // 9: bossopenolt.paramFields.integervalue_param:type_name -> bossopenolt.IntegerValue
	22,  // 10: bossopenolt.paramFields.setsdntable_param:type_name -> bossopenolt.SetSdnTable
	25,  // 11: bossopenolt.paramFields.getsdntable_param:type_name -> bossopenolt.GetSdnTable
	28,  // 12: bossopenolt.paramFields.setlength_param:type_name -> bossopenolt.SetLength
	29,  // 13: bossopenolt.paramFields.getlength_param:type_name -> bossopenolt.GetLength
	30,  // 14: bossopenolt.paramFields.onuctrl_param:type_name -> bossopenolt.OnuCtrl
	15,  // 15: bossopenolt.paramFields.addonusla_param:type_name -> bossopenolt.AddOnuSla
	14,  // 16: bossopenolt.paramFields.clearonusla_param:type_name -> bossopenolt.ClearOnuSla
	13,  // 17: bossopenolt.paramFields.setonuallocid_param:type_name -> bossopenolt.SetOnuAllocid
	12,  // 18: bossopenolt.paramFields.setonuvssn_param:type_name -> bossopenolt.SetOnuVssn
	11,  // 19: bossopenolt.paramFields.setburstdelimit_param:type_name -> bossopenolt.SetBurstDelimit
	10,  // 20: bossopenolt.paramFields.setburstpreamble_param:type_name -> bossopenolt.SetBurstPreamble
	9,   // 21: bossopenolt.paramFields.setburstversion_param:type_name -> bossopenolt.SetBurstVersion
	8,   // 22: bossopenolt.paramFields.setdsomcidata_param:type_name -> bossopenolt.SetDsOmciData
	7,   // 23: bossopenolt.paramFields.settod_param:type_name -> bossopenolt.SetTod
	27,  // 24: bossopenolt.paramFields.stringvalue_param:type_name -> bossopenolt.StringValue
	6,   // 25: bossopenolt.paramFields.setpmcontrol_param:type_name -> bossopenolt.SetPmControl
	4,   // 26: bossopenolt.paramFields.setslicebw_param:type_name -> bossopenolt.SetSliceBw
	5,   // 27: bossopenolt.paramFields.getslicebw_param:type_name -> bossopenolt.GetSliceBw
	3,   // 28: bossopenolt.paramFields.setslav2_param:type_name -> bossopenolt.SetSlaV2
	2,   // 29: bossopenolt.paramFields.sendomcidata_param:type_name -> bossopenolt.SendOmciData
	48,  // 30: bossopenolt.RepeatedSlaResponse.resp:type_name -> bossopenolt.SlaResponse
	0,   // 31: bossopenolt.BossOpenolt.GetOltConnect:input_type -> bossopenolt.boss_request
	0,   // 32: bossopenolt.BossOpenolt.GetOltDeviceInfo:input_type -> bossopenolt.boss_request
	0,   // 33: bossopenolt.BossOpenolt.SetPmdTxDis:input_type -> bossopenolt.boss_request
	0,   // 34: bossopenolt.BossOpenolt.GetPmdTxdis:input_type -> bossopenolt.boss_request
	0,   // 35: bossopenolt.BossOpenolt.GetDevicePmdStatus:input_type -> bossopenolt.boss_request
	0,   // 36: bossopenolt.BossOpenolt.SetDevicePort:input_type -> bossopenolt.boss_request
	0,   // 37: bossopenolt.BossOpenolt.GetDevicePort:input_type -> bossopenolt.boss_request
	0,   // 38: bossopenolt.BossOpenolt.PortReset:input_type -> bossopenolt.boss_request
	0,   // 39: bossopenolt.BossOpenolt.SetMtuSize:input_type -> bossopenolt.boss_request
	0,   // 40: bossopenolt.BossOpenolt.GetMtuSize:input_type -> bossopenolt.boss_request
	0,   // 41: bossopenolt.BossOpenolt.SetVlan:input_type -> bossopenolt.boss_request
	0,   // 42: bossopenolt.BossOpenolt.GetVlan:input_type -> bossopenolt.boss_request
	0,   // 43: bossopenolt.BossOpenolt.SetLutMode:input_type -> bossopenolt.boss_request
	0,   // 44: bossopenolt.BossOpenolt.GetLutMode:input_type -> bossopenolt.boss_request
	0,   // 45: bossopenolt.BossOpenolt.SetAgingMode:input_type -> bossopenolt.boss_request
	0,   // 46: bossopenolt.BossOpenolt.GetAgingMode:input_type -> bossopenolt.boss_request
	0,   // 47: bossopenolt.BossOpenolt.SetAgingTime:input_type -> bossopenolt.boss_request
	0,   // 48: bossopenolt.BossOpenolt.GetAgingTime:input_type -> bossopenolt.boss_request
	0,   // 49: bossopenolt.BossOpenolt.GetDeviceMacInfo:input_type -> bossopenolt.boss_request
	0,   // 50: bossopenolt.BossOpenolt.SetSdnTable:input_type -> bossopenolt.boss_request
	0,   // 51: bossopenolt.BossOpenolt.GetSdnTable:input_type -> bossopenolt.boss_request
	0,   // 52: bossopenolt.BossOpenolt.SetLength:input_type -> bossopenolt.boss_request
	0,   // 53: bossopenolt.BossOpenolt.GetLength:input_type -> bossopenolt.boss_request
	0,   // 54: bossopenolt.BossOpenolt.SetQuietZone:input_type -> bossopenolt.boss_request
	0,   // 55: bossopenolt.BossOpenolt.GetQuietZone:input_type -> bossopenolt.boss_request
	0,   // 56: bossopenolt.BossOpenolt.SetFecMode:input_type -> bossopenolt.boss_request
	0,   // 57: bossopenolt.BossOpenolt.GetFecMode:input_type -> bossopenolt.boss_request
	0,   // 58: bossopenolt.BossOpenolt.AddOnu:input_type -> bossopenolt.boss_request
	0,   // 59: bossopenolt.BossOpenolt.DeleteOnu25G:input_type -> bossopenolt.boss_request
	0,   // 60: bossopenolt.BossOpenolt.AddOnuSla:input_type -> bossopenolt.boss_request
	0,   // 61: bossopenolt.BossOpenolt.ClearOnuSla:input_type -> bossopenolt.boss_request
	0,   // 62: bossopenolt.BossOpenolt.GetSlaTable:input_type -> bossopenolt.boss_request
	0,   // 63: bossopenolt.BossOpenolt.SetOnuAllocid:input_type -> bossopenolt.boss_request
	0,   // 64: bossopenolt.BossOpenolt.DelOnuAllocid:input_type -> bossopenolt.boss_request
	0,   // 65: bossopenolt.BossOpenolt.SetOnuVssn:input_type -> bossopenolt.boss_request
	0,   // 66: bossopenolt.BossOpenolt.GetOnuVssn:input_type -> bossopenolt.boss_request
	0,   // 67: bossopenolt.BossOpenolt.GetOnuDistance:input_type -> bossopenolt.boss_request
	0,   // 68: bossopenolt.BossOpenolt.SetBurstDelimiter:input_type -> bossopenolt.boss_request
	0,   // 69: bossopenolt.BossOpenolt.GetBurstDelimiter:input_type -> bossopenolt.boss_request
	0,   // 70: bossopenolt.BossOpenolt.SetBurstPreamble:input_type -> bossopenolt.boss_request
	0,   // 71: bossopenolt.BossOpenolt.GetBurstPreamble:input_type -> bossopenolt.boss_request
	0,   // 72: bossopenolt.BossOpenolt.SetBurstVersion:input_type -> bossopenolt.boss_request
	0,   // 73: bossopenolt.BossOpenolt.GetBurstVersion:input_type -> bossopenolt.boss_request
	0,   // 74: bossopenolt.BossOpenolt.SetBurstProfile:input_type -> bossopenolt.boss_request
	0,   // 75: bossopenolt.BossOpenolt.GetBurstProfile:input_type -> bossopenolt.boss_request
	0,   // 76: bossopenolt.BossOpenolt.GetRegisterStatus:input_type -> bossopenolt.boss_request
	0,   // 77: bossopenolt.BossOpenolt.GetOnuInfo:input_type -> bossopenolt.boss_request
	0,   // 78: bossopenolt.BossOpenolt.GetOmciStatus:input_type -> bossopenolt.boss_request
	0,   // 79: bossopenolt.BossOpenolt.SetDsOmciOnu:input_type -> bossopenolt.boss_request
	0,   // 80: bossopenolt.BossOpenolt.SetDsOmciData:input_type -> bossopenolt.boss_request
	0,   // 81: bossopenolt.BossOpenolt.GetUsOmciData:input_type -> bossopenolt.boss_request
	0,   // 82: bossopenolt.BossOpenolt.SetTod:input_type -> bossopenolt.boss_request
	0,   // 83: bossopenolt.BossOpenolt.GetTod:input_type -> bossopenolt.boss_request
	0,   // 84: bossopenolt.BossOpenolt.SetDataMode:input_type -> bossopenolt.boss_request
	0,   // 85: bossopenolt.BossOpenolt.GetDataMode:input_type -> bossopenolt.boss_request
	0,   // 86: bossopenolt.BossOpenolt.SetFecDecMode:input_type -> bossopenolt.boss_request
	0,   // 87: bossopenolt.BossOpenolt.GetFecDecMode:input_type -> bossopenolt.boss_request
	0,   // 88: bossopenolt.BossOpenolt.SetDelimiter:input_type -> bossopenolt.boss_request
	0,   // 89: bossopenolt.BossOpenolt.GetDelimiter:input_type -> bossopenolt.boss_request
	0,   // 90: bossopenolt.BossOpenolt.SetErrorPermit:input_type -> bossopenolt.boss_request
	0,   // 91: bossopenolt.BossOpenolt.GetErrorPermit:input_type -> bossopenolt.boss_request
	0,   // 92: bossopenolt.BossOpenolt.SetPmControl:input_type -> bossopenolt.boss_request
	0,   // 93: bossopenolt.BossOpenolt.GetPmControl:input_type -> bossopenolt.boss_request
	0,   // 94: bossopenolt.BossOpenolt.GetPmTable:input_type -> bossopenolt.boss_request
	0,   // 95: bossopenolt.BossOpenolt.SetSAOn:input_type -> bossopenolt.boss_request
	0,   // 96: bossopenolt.BossOpenolt.SetSAOff:input_type -> bossopenolt.boss_request
	0,   // 97: bossopenolt.BossOpenolt.SetSliceBw:input_type -> bossopenolt.boss_request
	0,   // 98: bossopenolt.BossOpenolt.GetSliceBw:input_type -> bossopenolt.boss_request
	0,   // 99: bossopenolt.BossOpenolt.SetSlaV2:input_type -> bossopenolt.boss_request
	0,   // 100: bossopenolt.BossOpenolt.GetSlaV2:input_type -> bossopenolt.boss_request
	0,   // 101: bossopenolt.BossOpenolt.SendOmciData:input_type -> bossopenolt.boss_request
	31,  // 102: bossopenolt.BossOpenolt.GetOltConnect:output_type -> bossopenolt.OltConnResponse
	32,  // 103: bossopenolt.BossOpenolt.GetOltDeviceInfo:output_type -> bossopenolt.OltDevResponse
	33,  // 104: bossopenolt.BossOpenolt.SetPmdTxDis:output_type -> bossopenolt.ExecResult
	34,  // 105: bossopenolt.BossOpenolt.GetPmdTxdis:output_type -> bossopenolt.PmdTxdisResponse
	35,  // 106: bossopenolt.BossOpenolt.GetDevicePmdStatus:output_type -> bossopenolt.PmdStatusResponse
	33,  // 107: bossopenolt.BossOpenolt.SetDevicePort:output_type -> bossopenolt.ExecResult
	36,  // 108: bossopenolt.BossOpenolt.GetDevicePort:output_type -> bossopenolt.GetPortResponse
	33,  // 109: bossopenolt.BossOpenolt.PortReset:output_type -> bossopenolt.ExecResult
	33,  // 110: bossopenolt.BossOpenolt.SetMtuSize:output_type -> bossopenolt.ExecResult
	37,  // 111: bossopenolt.BossOpenolt.GetMtuSize:output_type -> bossopenolt.MtuSizeResponse
	33,  // 112: bossopenolt.BossOpenolt.SetVlan:output_type -> bossopenolt.ExecResult
	38,  // 113: bossopenolt.BossOpenolt.GetVlan:output_type -> bossopenolt.GetVlanResponse
	33,  // 114: bossopenolt.BossOpenolt.SetLutMode:output_type -> bossopenolt.ExecResult
	39,  // 115: bossopenolt.BossOpenolt.GetLutMode:output_type -> bossopenolt.ModeResponse
	33,  // 116: bossopenolt.BossOpenolt.SetAgingMode:output_type -> bossopenolt.ExecResult
	39,  // 117: bossopenolt.BossOpenolt.GetAgingMode:output_type -> bossopenolt.ModeResponse
	33,  // 118: bossopenolt.BossOpenolt.SetAgingTime:output_type -> bossopenolt.ExecResult
	40,  // 119: bossopenolt.BossOpenolt.GetAgingTime:output_type -> bossopenolt.AgingTimeResponse
	41,  // 120: bossopenolt.BossOpenolt.GetDeviceMacInfo:output_type -> bossopenolt.DevMacInfoResponse
	42,  // 121: bossopenolt.BossOpenolt.SetSdnTable:output_type -> bossopenolt.SdnTableKeyResponse
	43,  // 122: bossopenolt.BossOpenolt.GetSdnTable:output_type -> bossopenolt.SdnTableResponse
	33,  // 123: bossopenolt.BossOpenolt.SetLength:output_type -> bossopenolt.ExecResult
	44,  // 124: bossopenolt.BossOpenolt.GetLength:output_type -> bossopenolt.LengthResponse
	33,  // 125: bossopenolt.BossOpenolt.SetQuietZone:output_type -> bossopenolt.ExecResult
	45,  // 126: bossopenolt.BossOpenolt.GetQuietZone:output_type -> bossopenolt.QuietZoneResponse
	33,  // 127: bossopenolt.BossOpenolt.SetFecMode:output_type -> bossopenolt.ExecResult
	39,  // 128: bossopenolt.BossOpenolt.GetFecMode:output_type -> bossopenolt.ModeResponse
	46,  // 129: bossopenolt.BossOpenolt.AddOnu:output_type -> bossopenolt.AddOnuResponse
	33,  // 130: bossopenolt.BossOpenolt.DeleteOnu25G:output_type -> bossopenolt.ExecResult
	33,  // 131: bossopenolt.BossOpenolt.AddOnuSla:output_type -> bossopenolt.ExecResult
	33,  // 132: bossopenolt.BossOpenolt.ClearOnuSla:output_type -> bossopenolt.ExecResult
	47,  // 133: bossopenolt.BossOpenolt.GetSlaTable:output_type -> bossopenolt.RepeatedSlaResponse
	33,  // 134: bossopenolt.BossOpenolt.SetOnuAllocid:output_type -> bossopenolt.ExecResult
	33,  // 135: bossopenolt.BossOpenolt.DelOnuAllocid:output_type -> bossopenolt.ExecResult
	33,  // 136: bossopenolt.BossOpenolt.SetOnuVssn:output_type -> bossopenolt.ExecResult
	49,  // 137: bossopenolt.BossOpenolt.GetOnuVssn:output_type -> bossopenolt.OnuVssnResponse
	50,  // 138: bossopenolt.BossOpenolt.GetOnuDistance:output_type -> bossopenolt.OnuDistResponse
	33,  // 139: bossopenolt.BossOpenolt.SetBurstDelimiter:output_type -> bossopenolt.ExecResult
	51,  // 140: bossopenolt.BossOpenolt.GetBurstDelimiter:output_type -> bossopenolt.BurstDelimitResponse
	33,  // 141: bossopenolt.BossOpenolt.SetBurstPreamble:output_type -> bossopenolt.ExecResult
	52,  // 142: bossopenolt.BossOpenolt.GetBurstPreamble:output_type -> bossopenolt.BurstPreambleResponse
	33,  // 143: bossopenolt.BossOpenolt.SetBurstVersion:output_type -> bossopenolt.ExecResult
	53,  // 144: bossopenolt.BossOpenolt.GetBurstVersion:output_type -> bossopenolt.BurstVersionResponse
	33,  // 145: bossopenolt.BossOpenolt.SetBurstProfile:output_type -> bossopenolt.ExecResult
	54,  // 146: bossopenolt.BossOpenolt.GetBurstProfile:output_type -> bossopenolt.BurstProfileResponse
	55,  // 147: bossopenolt.BossOpenolt.GetRegisterStatus:output_type -> bossopenolt.RegisterStatusResponse
	56,  // 148: bossopenolt.BossOpenolt.GetOnuInfo:output_type -> bossopenolt.OnuInfoResponse
	57,  // 149: bossopenolt.BossOpenolt.GetOmciStatus:output_type -> bossopenolt.StatusResponse
	33,  // 150: bossopenolt.BossOpenolt.SetDsOmciOnu:output_type -> bossopenolt.ExecResult
	33,  // 151: bossopenolt.BossOpenolt.SetDsOmciData:output_type -> bossopenolt.ExecResult
	63,  // 152: bossopenolt.BossOpenolt.GetUsOmciData:output_type -> bossopenolt.OmciDataResponse
	33,  // 153: bossopenolt.BossOpenolt.SetTod:output_type -> bossopenolt.ExecResult
	58,  // 154: bossopenolt.BossOpenolt.GetTod:output_type -> bossopenolt.TodResponse
	33,  // 155: bossopenolt.BossOpenolt.SetDataMode:output_type -> bossopenolt.ExecResult
	39,  // 156: bossopenolt.BossOpenolt.GetDataMode:output_type -> bossopenolt.ModeResponse
	33,  // 157: bossopenolt.BossOpenolt.SetFecDecMode:output_type -> bossopenolt.ExecResult
	39,  // 158: bossopenolt.BossOpenolt.GetFecDecMode:output_type -> bossopenolt.ModeResponse
	33,  // 159: bossopenolt.BossOpenolt.SetDelimiter:output_type -> bossopenolt.ExecResult
	59,  // 160: bossopenolt.BossOpenolt.GetDelimiter:output_type -> bossopenolt.FecDecResponse
	33,  // 161: bossopenolt.BossOpenolt.SetErrorPermit:output_type -> bossopenolt.ExecResult
	60,  // 162: bossopenolt.BossOpenolt.GetErrorPermit:output_type -> bossopenolt.ErrorPermitResponse
	33,  // 163: bossopenolt.BossOpenolt.SetPmControl:output_type -> bossopenolt.ExecResult
	61,  // 164: bossopenolt.BossOpenolt.GetPmControl:output_type -> bossopenolt.PmControlResponse
	62,  // 165: bossopenolt.BossOpenolt.GetPmTable:output_type -> bossopenolt.PmTableResponse
	33,  // 166: bossopenolt.BossOpenolt.SetSAOn:output_type -> bossopenolt.ExecResult
	33,  // 167: bossopenolt.BossOpenolt.SetSAOff:output_type -> bossopenolt.ExecResult
	33,  // 168: bossopenolt.BossOpenolt.SetSliceBw:output_type -> bossopenolt.ExecResult
	64,  // 169: bossopenolt.BossOpenolt.GetSliceBw:output_type -> bossopenolt.GetSliceBwResponse
	65,  // 170: bossopenolt.BossOpenolt.SetSlaV2:output_type -> bossopenolt.SlaV2Response
	65,  // 171: bossopenolt.BossOpenolt.GetSlaV2:output_type -> bossopenolt.SlaV2Response
	66,  // 172: bossopenolt.BossOpenolt.SendOmciData:output_type -> bossopenolt.BossOmciResponse
	102, // [102:173] is the sub-list for method output_type
	31,  // [31:102] is the sub-list for method input_type
	31,  // [31:31] is the sub-list for extension type_name
	31,  // [31:31] is the sub-list for extension extendee
	0,   // [0:31] is the sub-list for field type_name
}

func init() { file_voltha_protos_bossopenolt_proto_init() }
func file_voltha_protos_bossopenolt_proto_init() {
	if File_voltha_protos_bossopenolt_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_voltha_protos_bossopenolt_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BossRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParamFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendOmciData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSlaV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSliceBw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSliceBw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPmControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDsOmciData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBurstVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBurstPreamble); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBurstDelimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOnuVssn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOnuAllocid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearOnuSla); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOnuSla); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPmdTxdis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPmdsKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPortKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMtuSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSdnTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDirectionMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDirectionValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSdnTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegerValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnuCtrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OltConnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OltDevResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PmdTxdisResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PmdStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPortResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MtuSizeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgingTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevMacInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdnTableKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdnTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LengthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuietZoneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOnuResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedSlaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnuVssnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnuDistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BurstDelimitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BurstPreambleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BurstVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BurstProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnuInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FecDecResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorPermitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PmControlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PmTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmciDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSliceBwResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlaV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voltha_protos_bossopenolt_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BossOmciResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_voltha_protos_bossopenolt_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ParamFields_SetpmdtxdisParam)(nil),
		(*ParamFields_GetpmdskindParam)(nil),
		(*ParamFields_SetportAram)(nil),
		(*ParamFields_SetportkindParam)(nil),
		(*ParamFields_SetmtusizeParam)(nil),
		(*ParamFields_SetvlanParam)(nil),
		(*ParamFields_SetdirectiommodeParam)(nil),
		(*ParamFields_GetdirectionvalueParam)(nil),
		(*ParamFields_IntegervalueParam)(nil),
		(*ParamFields_SetsdntableParam)(nil),
		(*ParamFields_GetsdntableParam)(nil),
		(*ParamFields_SetlengthParam)(nil),
		(*ParamFields_GetlengthParam)(nil),
		(*ParamFields_OnuctrlParam)(nil),
		(*ParamFields_AddonuslaParam)(nil),
		(*ParamFields_ClearonuslaParam)(nil),
		(*ParamFields_SetonuallocidParam)(nil),
		(*ParamFields_SetonuvssnParam)(nil),
		(*ParamFields_SetburstdelimitParam)(nil),
		(*ParamFields_SetburstpreambleParam)(nil),
		(*ParamFields_SetburstversionParam)(nil),
		(*ParamFields_SetdsomcidataParam)(nil),
		(*ParamFields_SettodParam)(nil),
		(*ParamFields_StringvalueParam)(nil),
		(*ParamFields_SetpmcontrolParam)(nil),
		(*ParamFields_SetslicebwParam)(nil),
		(*ParamFields_GetslicebwParam)(nil),
		(*ParamFields_Setslav2Param)(nil),
		(*ParamFields_SendomcidataParam)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_voltha_protos_bossopenolt_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   67,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_voltha_protos_bossopenolt_proto_goTypes,
		DependencyIndexes: file_voltha_protos_bossopenolt_proto_depIdxs,
		MessageInfos:      file_voltha_protos_bossopenolt_proto_msgTypes,
	}.Build()
	File_voltha_protos_bossopenolt_proto = out.File
	file_voltha_protos_bossopenolt_proto_rawDesc = nil
	file_voltha_protos_bossopenolt_proto_goTypes = nil
	file_voltha_protos_bossopenolt_proto_depIdxs = nil
}
