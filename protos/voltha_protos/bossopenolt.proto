// Copyright (c) 2018 Open Networking Foundation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option go_package = "github.com/opencord/voltha-protos/v5/go/bossopenolt";
option java_package = "org.opencord.voltha.bossopenolt";
option java_outer_classname = "VolthaBossOpenOLT";
//option java_generic_services=true;
package bossopenolt;
import "google/api/annotations.proto";
//import "google/protobuf/any.proto";
//import public "voltha_protos/tech_profile.proto";
//import "voltha_protos/common.proto";
//import "voltha_protos/ext_config.proto";
service BossOpenolt {
	rpc GetOltConnect(boss_request) returns (OltConnResponse){    // 1
		option (google.api.http) = { 
			post: "/api/boss/v1/getoltconnect"
			body : "*"
		};
	}
	
	rpc GetOltDeviceInfo(boss_request) returns (OltDevResponse){  // 2
		option (google.api.http) = {
			post: "/api/boss/v1/getoltdeviceinfo"
			body: "*"
		};
	}
	
	rpc SetPmdTxDis(boss_request) returns (ExecResult){  // 3   
		option (google.api.http) = { 
			post: "/api/boss/v1/setpmdtxdis"
			body: "*"
		};
	}

	rpc GetPmdTxdis(boss_request) returns (PmdTxdisResponse){   // 4
		option (google.api.http) = { 
			post: "/api/boss/v1/getpmdtxdis"
			body: "*"
		};
	}

	rpc GetDevicePmdStatus(boss_request) returns (PmdStatusResponse){  // 5
		option (google.api.http) = {
			post: "/api/boss/v1/getdevicepmdstatus"
			body: "*"
		};
	}
	rpc SetDevicePort(boss_request) returns (ExecResult){  // 6
		option (google.api.http) = { 
			post: "/api/boss/v1/setdeviceport"
			body: "*"
		};
	}
	
	rpc GetDevicePort(boss_request) returns (GetPortResponse){   // 7
		option (google.api.http) = { 
			post: "/api/boss/v1/getdeviceport"
			body: "*"
		};
	}

	rpc PortReset(boss_request) returns (ExecResult){   // 8
		option (google.api.http) = { 
			post: "/api/boss/v1/portreset"
			body: "*"
		};
	}

	rpc SetMtuSize(boss_request) returns (ExecResult){   // 9
		option (google.api.http) = { 
			post: "/api/boss/v1/setmtusize"
			body: "*"
		};
	}

	rpc GetMtuSize(boss_request) returns (MtuSizeResponse){    // 10
		option (google.api.http) = { 
			post: "/api/boss/v1/getmtusize"
			body: "*"
		};
	}

	rpc SetVlan(boss_request) returns (ExecResult){    // 11
		option (google.api.http) = { 
			post: "/api/boss/v1/setvlan"
			body: "*"
		};
	}
	
	rpc GetVlan(boss_request) returns (GetVlanResponse){    // 12
		option (google.api.http) = { 
			post: "/api/boss/v1/getvlan"
			body: "*"
		};
	}

	rpc SetLutMode(boss_request) returns (ExecResult){    // 13
		option (google.api.http) = { 
			post: "/api/boss/v1/setlutmode"
			body: "*"
		};
	}

	rpc GetLutMode(boss_request) returns (ModeResponse){  // 14
		option (google.api.http) = { 
			post: "/api/boss/v1/getlutmode"
			body: "*"
		};
	}
	
	rpc SetAgingMode(boss_request) returns (ExecResult){  // 15
		option (google.api.http) = { 
			post: "/api/boss/v1/setagingmode"
			body: "*"
		};
	}

	rpc GetAgingMode(boss_request) returns (ModeResponse){  // 16
		option (google.api.http) = { 
			post: "/api/boss/v1/getagingmode"
			body: "*"
		};
	}
	
	rpc SetAgingTime(boss_request) returns (ExecResult){   // 17
		option (google.api.http) = { 
			post: "/api/boss/v1/setagingtime"
			body: "*"
		};
	}
	
	rpc GetAgingTime(boss_request) returns (AgingTimeResponse){  // 18
		option (google.api.http) = { 
			post: "/api/boss/v1/getagingtime"
			body: "*"
		};
	}

	rpc GetDeviceMacInfo(boss_request) returns (DevMacInfoResponse){  // 19
		option (google.api.http) = { 
			post: "/api/boss/v1/getdevicemacinfo"
			body: "*"
		};
	}

	rpc SetSdnTable(boss_request) returns (SdnTableKeyResponse){  // 20
		option (google.api.http) = { 
			post: "/api/boss/v1/setsdntable"
			body: "*"
		};
	}

	rpc GetSdnTable(boss_request) returns (SdnTableResponse){  // 21
		option (google.api.http) = { 
			post: "/api/boss/v1/getsdntable"
			body: "*"
		};
	}

	rpc SetLength(boss_request) returns (ExecResult){  // 22
		option (google.api.http) = { 
			post: "/api/boss/v1/setlength"
			body: "*"
		};
	}
	rpc GetLength(boss_request) returns (LengthResponse){   // 23
		option (google.api.http) = { 
			post: "/api/boss/v1/getlength"
			body: "*"
		};
	}
	rpc SetQuietZone(boss_request) returns (ExecResult){   // 24
		option (google.api.http) = { 
			post: "/api/boss/v1/setquietzone"
			body: "*"
		};
	}
	rpc GetQuietZone(boss_request) returns (QuietZoneResponse){   // 25
		option (google.api.http) = { 
			post: "/api/boss/v1/getquietzone"
			body: "*"
		};
	}
	rpc SetFecMode(boss_request) returns (ExecResult){   // 26
		option (google.api.http) = { 
			post: "/api/boss/v1/setfecmode"
			body: "*"
		};
	}
	rpc GetFecMode(boss_request) returns (ModeResponse){   // 27
		option (google.api.http) = { 
			post: "/api/boss/v1/getfecmode"
			body: "*"
		};
	}
	rpc AddOnu(boss_request) returns (AddOnuResponse){   // 28
		option (google.api.http) = { 
			post: "/api/boss/v1/addonu"
			body: "*"
		};
	}
	rpc DeleteOnu25G(boss_request) returns (ExecResult){   // 29
		option (google.api.http) = { 
			post: "/api/boss/v1/delonu"
			body: "*"
		};
	}
	rpc AddOnuSla(boss_request) returns (ExecResult){    // 30
		option (google.api.http) = { 
			post: "/api/boss/v1/addonusla"
			body: "*"
		};
	}
	rpc ClearOnuSla(boss_request) returns (ExecResult){   // 31
		option (google.api.http) = { 
			post: "/api/boss/v1/clearonusla"
			body: "*"
		};
	}
	rpc GetSlaTable(boss_request) returns (RepeatedSlaResponse){   // 32
		option (google.api.http) = { 
			post: "/api/boss/v1/getslatalbe"
			body: "*"
		};
	}
	rpc SetOnuAllocid(boss_request) returns (ExecResult){  // 33
		option (google.api.http) = { 
			post: "/api/boss/v1/setonuallocid"
			body: "*"
		};
	}
	rpc DelOnuAllocid(boss_request) returns(ExecResult){    // 34
		option (google.api.http) = { 
			post: "/api/boss/v1/delonuallocid"
			body: "*"
		};
	}
	rpc SetOnuVssn(boss_request) returns(ExecResult){    // 35
		option (google.api.http) = { 
			post: "/api/boss/v1/setonuvssn"
			body: "*"
		};
	}
	rpc GetOnuVssn(boss_request) returns(OnuVssnResponse){    // 36
		option (google.api.http) = { 
			post: "api/boss/v1/getonuvssn"
			body: "*"
		};
	}
	rpc GetOnuDistance (boss_request)returns(OnuDistResponse){    // 37
		option (google.api.http) = { 
			post : "/api/boss/v1/getonudistance"
			body : "*"
		};
	}
	rpc SetBurstDelimiter(boss_request)returns (ExecResult){    // 38
		option (google.api.http) = { 
			post: "/api/boss/v1/setburstdelimiter"
			body: "*"
		};
	}
	rpc GetBurstDelimiter(boss_request) returns (BurstDelimitResponse){   // 39
		option (google.api.http) = { 
			post: "/api/boss/v1/getburstdelimiter"
			body: "*"
		};
	}
	rpc SetBurstPreamble(boss_request) returns (ExecResult){   // 40
		option (google.api.http) = { 
			post: "/api/boss/v1/setburstpreamble"
			body: "*"
		};
	}
	rpc GetBurstPreamble(boss_request) returns (BurstPreambleResponse){   // 41
		option (google.api.http) = { 
			post: "/api/boss/v1/getburstpreamble"
			body: "*"
		};
	}
	rpc SetBurstVersion(boss_request) returns (ExecResult){   // 42
		option (google.api.http) = { 
			post: "/api/boss/v1/setburstversion"
			body: "*"
		};
	}
	rpc GetBurstVersion(boss_request) returns (BurstVersionResponse){   // 43
		option (google.api.http) = { 
			post: "/api/boss/v1/getburstversion"
			body: "*"
		};
	}
	rpc SetBurstProfile(boss_request) returns (ExecResult){   // 44
		option (google.api.http) = { 
			post: "/api/boss/v1/setburstprofile"
			body: "*"
		};
	}
	rpc GetBurstProfile(boss_request) returns (BurstProfileResponse){   // 45
		option (google.api.http) = { 
			post: "/api/boss/v1/getburstprofile"
			body: "*"
		};
	}
	rpc GetRegisterStatus(boss_request) returns (RegisterStatusResponse){   // 46
		option (google.api.http) = { 
			post: "/api/boss/v1/getregisterstatus"
			body: "*"
		};
	}
	rpc GetOnuInfo(boss_request) returns (OnuInfoResponse){   // 47
		option (google.api.http) = { 
			post: "/api/boss/v1/getonuinfo"
			body: "*"
		};
	}
	rpc GetOmciStatus(boss_request) returns (StatusResponse){   // 48
		option (google.api.http) = { 
			post: "/api/boss/v1/getburstprofile"
			body: "*"
		};
	}
	rpc SetDsOmciOnu(boss_request) returns (ExecResult){  // 49
		option (google.api.http) = { 
			post: "/api/boss/v1/setdsomcionu"
			body: "*"
		};
	}
	rpc SetDsOmciData(boss_request) returns (ExecResult){   // 50
		option (google.api.http) ={
			post: "ap/boss/v1/setdsomcidata"
			body: "*"
		};
	}
	rpc GetUsOmciData(boss_request) returns (OmciDataResponse){    // 51
		option (google.api.http) ={
			post: "ap/boss/v1/getusomcidata"
			body: "*"
		};
	}
	rpc SetTod(boss_request) returns (ExecResult){   // 52
		option (google.api.http) = { 
			post: "/api/boss/v1/settod"
			body: "*"
		};
	}
	rpc GetTod(boss_request) returns (TodResponse){   // 53
		option (google.api.http) = { 
			post: "/api/boss/v1/gettod"
			body: "*"
		};
	}
	rpc SetDataMode(boss_request) returns (ExecResult){   // 54
		option (google.api.http) = { 
			post: "/api/boss/v1/setdatamode"
			body: "*"
		};
	}
	rpc GetDataMode(boss_request) returns (ModeResponse){   // 55
		option (google.api.http) = { 
			post: "/api/boss/v1/getdatamode"
			body: "*"
		};
	}
	rpc SetFecDecMode(boss_request) returns (ExecResult){    // 56
		option (google.api.http) = { 
			post: "/api/boss/v1/setfecdecmode"
			body: "*"
		};
	}
	rpc GetFecDecMode(boss_request) returns (ModeResponse){   // 57
		option (google.api.http) = { 
			post: "/api/boss/v1/getfecdecmode"
			body: "*"
		};
	}
	rpc SetDelimiter(boss_request) returns (ExecResult){   // 58
		option (google.api.http) = { 
			post: "/api/boss/v1/setdelimiter"
			body: "*"
		};
	}
	rpc GetDelimiter(boss_request) returns (FecDecResponse){   // 59
		option (google.api.http) = { 
			post: "/api/boss/v1/getdelimiter"
			body: "*"
		};
	}
	rpc SetErrorPermit(boss_request) returns (ExecResult){    // 60
		option (google.api.http) = { 
			post: "/api/boss/v1/seterrorpermit"
			body: "*"
		};
	}
	rpc GetErrorPermit(boss_request) returns (ErrorPermitResponse){   // 61
		option (google.api.http) = { 
			post: "/api/boss/v1/geterrorpermit"
			body: "*"
		};
	}
	rpc SetPmControl(boss_request) returns (ExecResult){   // 62
		option (google.api.http) = { 
			post: "/api/boss/v1/setpmcontrol"
			body: "*"
		};
	}
	rpc GetPmControl(boss_request) returns (PmControlResponse){   // 63
		option (google.api.http) = { 
			post: "/api/boss/v1/getpmcontrol"
			body: "*"
		};
	}
	rpc GetPmTable(boss_request) returns (PmTableResponse){   // 64
		option (google.api.http) = { 
			post: "/api/boss/v1/getpmtable"
			body: "*"
		};
	}
	rpc SetSAOn(boss_request) returns (ExecResult){   // 65
		option (google.api.http) = { 
			post: "/api/boss/v1/setsaon"
			body: "*"
		};
	}
	rpc SetSAOff(boss_request) returns (ExecResult){   // 66
		option (google.api.http) = { 
			post: "/api/boss/v1/setsaoff"
			body: "*"
		};
	}
	rpc SetSliceBw(boss_request) returns (ExecResult){ //67
		option (google.api.http) = {
			post: "/api/boss/v1/setslicebw"
			body: "*"
		};
	}
	rpc GetSliceBw(boss_request) returns (GetSliceBwResponse){ //68
		option(google.api.http)={
			post: "/api/boss/v1/getslicebw"
			body: "*"
		};
	}
	rpc SetSlaV2(boss_request) returns (SlaV2Response){  //69
		option(google.api.http)={
			post: "/api/boss/v1/setslav2"
			body : "*"
		};
	}
	rpc GetSlaV2(boss_request) returns (SlaV2Response){  //70
		option(google.api.http)={
			post: "/api/boss/v1/setslav2"
			body : "*"
		};
	}
}
message boss_request{
  string device_id = 1;
  paramFields param=2;//optional..
}

message paramFields{
   oneof data {
	SetPmdTxdis setpmdtxdis_param=2;
	GetPmdsKind getpmdskind_param=3;
	SetPort setport_aram=4;
	SetPortKind setportkind_param =5;
	SetMtuSize setmtusize_param =6;
	SetVlan setvlan_param =7;
	SetDirectionMode setdirectiommode_param=8;
	GetDirectionValue getdirectionvalue_param=9;
	IntegerValue integervalue_param=10;
	SetSdnTable setsdntable_param=11;
	GetSdnTable getsdntable_param=12;
	SetLength setlength_param=13;
	GetLength getlength_param=14;
	OnuCtrl onuctrl_param=15;
	AddOnuSla addonusla_param=16;
	ClearOnuSla clearonusla_param=17;
	SetOnuAllocid setonuallocid_param=18;
	SetOnuVssn setonuvssn_param=19;
	SetBurstDelimit setburstdelimit_param=20;
	SetBurstPreamble setburstpreamble_param=21;
	SetBurstVersion setburstversion_param=22;
	SetDsOmciData setdsomcidata_param=23;
	SetTod settod_param=24;
	StringValue stringvalue_param=25;
	SetPmControl setpmcontrol_param=26;
	SetSliceBw setslicebw_param=27;
	GetSliceBw getslicebw_param=28;
	SetSlaV2 setslav2_param =29;
  }
}
message SetSlaV2{
	int32 onu_id =1;
	int32 tcont = 2;
	int32 slice = 3;
	int32 co_dba=4;
	int32 type =5;
	int32 rf=6;
	int32 ra =7;
	int32 rn =8;
}
message SetSliceBw{
	int32 slice=1;
	int32 bw=2;
}
message GetSliceBw{
	int32 slice=1;
}
message SetPmControl{
  int32 onu_id=1;
  int32 mode=2;
  int32 power_time=3;
  int32 aware_time=4;
}
message SetTod{
  int32 mode=1;
  int32 time=2;
}
message SetDsOmciData{
  int32 control=1;
  string data=2;
}
message SetBurstVersion{
  string version=1;
  int32 index=2;
  int64 pontag=3;
}
message SetBurstPreamble{
  int32 repeat=1;
}
message SetBurstDelimit{
  int32 length=1;
  string delimiter=2;
}
message SetOnuVssn{
  int32 onu_id=1;
  int32 vssn=2;
}
message SetOnuAllocid{
  int32 onu_id=1;
  int32 alloc_id=2;
}
message ClearOnuSla{
  int32 onu_id=1;
  int32 tcont=2;
}
message AddOnuSla{
  int32 onu_id=1;
  int32 tcont=2;
  int32 type=3;
  int32 si=4;
  int32 abmin=5;
  int32 absur=6;
}

message SetPmdTxdis {
  int32 port_type = 1;
  int32 mode = 2;
  int32 port_no=3;
}

message GetPmdsKind{
  int32 port_type = 1;
  int32 port_no=2;
}

message SetPort {
  int32 mode = 1;
  int32 port_no=2;
}

message SetPortKind {
  int32 port_no=1;
}

message SetMtuSize {
  int32 mtu_size = 2;
}

message SetVlan {
  int32 action =2;
  int32 vid =3;
  int32 pbit =4;
}
message SetSdnTable{
  int32 port_id=1;
  int32 vid=2;
  int32 pbit=3;
}

message SetDirectionMode{
  int32 direction =1;
  int32 mode=2;
}

message GetDirectionValue{
  int32 direction=1;
}


message GetSdnTable{
  int32 address=1;
}

message IntegerValue{
  int32 value=1;
}
message StringValue{
  string value=1;
}

message SetLength{
  int32 operation=1;
  int32 value=2;
}
message GetLength{
  int32 operation=1;
}
message OnuCtrl{
  int32 onu_id=1;
}

message OltConnResponse{
	string device_id=1;
	string ip = 2;
	string mac =3;
}

message OltDevResponse{
	string device_id=1;
	string fpga_type=2;
	string fpga_ver=3;
	string fpga_Date=4;
	string sw_ver=5;
	string sw_date=6;
}

message ExecResult{
	int32 result=1; //success=0, fail=1;
}

message PmdTxdisResponse{
	int32 port_no=1;
	string status=2;
}

message PmdStatusResponse{
	int32 port_no=1;
	string loss=2;
	string module=3;
	string fault=4;
	string link=5;
}
message GetPortResponse{
	int32 port_no=1;
	string state =2;
}
message MtuSizeResponse{
	int32 mtu=1;
}

message GetVlanResponse{
	string device_id=1;
	int32 vlan_mode=2;
	string fields=3;
}
message ModeResponse{
	string device_id=1;
	int32 mode=2;
}

message AgingTimeResponse{
	string device_id=1;
	int32 aging_time=2;
}
message DevMacInfoResponse{
	string device_id=1;
	int32 mtu=2;
	int32 vlan_mode=3;
	int32 aging_mode=4;
	int32 aging_time=5;
}
message SdnTableKeyResponse{
	int32 hash_key=1;
}
message SdnTableResponse{
	string device_id=1;
	int32 address=2;
	int32 port_id=3;
	string vlan=4;
}
message LengthResponse{
	string device_id=1;
	double value=2;
}

message QuietZoneResponse{
	string device_id=1;
	int32 value=2;
}

message AddOnuResponse{
	string device_id=1;
	int32 onu_id=2;
	string result=3;
	string rate=4;
	string vendor_id=5;
	string vssn=6;
}
message RepeatedSlaResponse{
	repeated SlaResponse resp=1;
}
message SlaResponse{
	string device_id=1;
	int32 onu_id=2;
	int32 tcont=3;
	string type=4;
	int32 si=5;
	int32 abmin=6;
	int32 absur=7;
	string fec=8;
	int32 distance=9;
}
message OnuVssnResponse{
	string device_id=1;
	int32 onu_id=2;
	int32 vssn=3;
}
message OnuDistResponse{
	string device_id=1;
	int32 onu_id=2;
	int32 distance=3;
}
message BurstDelimitResponse{
	string device_id=1;
	int32 length=2;
	string delimiter=3;
}
message BurstPreambleResponse{
	string device_id=1;
	int32 length=2;
	string preamble=3;
	int32 repeat=4;
}
message BurstVersionResponse{
  string device_id=1;
  string version=2;
  int32 index=3;
  int64 pontag=4;
}
message BurstProfileResponse{
  string device_id=1;
  int32 onu_id=2;
  string version=3;
  int32 index=4;
  int32 delimiter_length=5;
  string delimiter=6;
  int32 preamble_length=7;
  string preamble=8;
  int32 repeat=9;
  int64 pontag=10;
}
message RegisterStatusResponse{
  string device_id=1;
  int32 onu_id=2;
  string status=3;
}
message OnuInfoResponse{
  string device_id=1;
  int32 onu_id=2;
  string rate=3;
  string vendor_id=4;
  string vssn=5;
  int32 distance=6;
  string status=7;
}
message StatusResponse{
  string device_id=1;
  string status=2;
}
message TodResponse{
  string device_id=1;
  int32 mode=2;
  int32 time=3;
}
message FecDecResponse{
  string device_id=1;
  string value=2;
}
message ErrorPermitResponse{
  string device_id=1;
  int32 value=2;
}
message PmControlResponse{
  string device_id=1;
  string action=2;
  string onu_mode=3;
  int32 transinit=4;
  int32 txinit=5;
}
message PmTableResponse{
  string device_id=1;
  int32 onu_id=2;
  string mode=3;
  int32 sleep=4;
  int32 aware=5;
  int32 rxoff=6;
  int32 hold=7;
  string action=8;
  string status=9;
}
message OmciDataResponse{
  string device_id=1;
  int32 control=2;
  int32 data=3;
  
}
message GetSliceBwResponse{
	string device_id=1;
	int32 bw=2;
}
message SlaV2Response{
	string device_id=1;
	int32 onu_id=2;
	int32 tcont=3;
	string alloc_id=4;
	int32 slice =5;
	int32 bw =6;
	string dba =7;
	string type = 8;
	int32 fixed=9;
	int32 assur =10;
	int32 nogur =11;
	int32 max=12;
	double reach =13;
}
